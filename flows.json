[
    {
        "id": "6912ad3d7a04a7bd",
        "type": "tab",
        "label": "Authentication",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4f197a1ac03259d0",
        "type": "tab",
        "label": "API and Data_base",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d7a5356611a97fea",
        "type": "tab",
        "label": "Dashboard",
        "disabled": false,
        "info": ""
    },
    {
        "id": "8894e458c60c45f5",
        "type": "tab",
        "label": "Logic",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "b4be30ee36010a80",
        "type": "tab",
        "label": "Logic",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ae2b7e41e083df49",
        "type": "tab",
        "label": "Logic",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9e10acadda40ebb9",
        "type": "tab",
        "label": "Logic_001",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "flow_forecast_remap",
        "type": "tab",
        "label": "Remap Forecast Keys",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6c03dff826846f79",
        "type": "sqlitedb",
        "db": "/home/pi/.node-red/projects/Project/DataBase/cons_db.sqlite",
        "mode": "RWC"
    },
    {
        "id": "tab1_ui",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "group1",
        "type": "ui_group",
        "name": "Main Dashboard",
        "tab": "tab1_ui",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "33657242ef5fb037",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "e83b4a7ea1491943",
        "type": "sqlitedb",
        "db": "/home/pi/.node-red/projects/Project/DataBase/user_data_base.sqlite",
        "mode": "RWC"
    },
    {
        "id": "38228510344247f8",
        "type": "ui-base",
        "name": "base",
        "path": "/dashboard",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "headerContent": "page",
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 5,
        "showDisconnectNotification": true,
        "allowInstall": true
    },
    {
        "id": "60ac3cbdefc9f2e1",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "14px"
        }
    },
    {
        "id": "1dbc57c30b7ebe69",
        "type": "ui-page",
        "name": "Login",
        "ui": "38228510344247f8",
        "path": "/login",
        "icon": "login",
        "layout": "notebook",
        "theme": "60ac3cbdefc9f2e1",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "6"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "6"
            }
        ],
        "order": 5,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "a4a1c767e4909e29",
        "type": "ui-page",
        "name": "Sign Up",
        "ui": "38228510344247f8",
        "path": "/sign-up",
        "icon": "account",
        "layout": "notebook",
        "theme": "60ac3cbdefc9f2e1",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 6,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "b015f86c38354e01",
        "type": "ui-page",
        "name": "User",
        "ui": "38228510344247f8",
        "path": "/user",
        "icon": "account",
        "layout": "notebook",
        "theme": "60ac3cbdefc9f2e1",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 7,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "a51d60ef20086f86",
        "type": "ui-page",
        "name": "tebbar Api",
        "ui": "38228510344247f8",
        "path": "/",
        "icon": "home",
        "layout": "grid",
        "theme": "60ac3cbdefc9f2e1",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "2f47a39f3cc9930a",
        "type": "ui-group",
        "name": "Login",
        "page": "1dbc57c30b7ebe69",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "e0f7da5a3b24256b",
        "type": "ui-group",
        "name": "Sign up",
        "page": "a4a1c767e4909e29",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "a7d84b864bcdbb8d",
        "type": "ui-group",
        "name": "Log Out",
        "page": "b015f86c38354e01",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "1dd26d328a9f311f",
        "type": "ui-group",
        "name": "Sub-Login",
        "page": "1dbc57c30b7ebe69",
        "width": 6,
        "height": 1,
        "order": 2,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "d5dc624819206887",
        "type": "ui-group",
        "name": "Sub-Sign Up",
        "page": "a4a1c767e4909e29",
        "width": 6,
        "height": 1,
        "order": 2,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "4f854fe43a9cd673",
        "type": "ui-group",
        "name": "tebbar Api",
        "page": "a51d60ef20086f86",
        "width": "14",
        "height": "1",
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "962221d873768ba1",
        "type": "sqlitedb",
        "db": "/home/pi/.node-red/projects/Project/DataBase/db.sqlite",
        "mode": "RWC"
    },
    {
        "id": "d92d5b5a4b3371e2",
        "type": "sqlitedb",
        "db": "/home/pi/.node-red/projects/Project/DataBase/db.sqlite",
        "mode": "RWC"
    },
    {
        "id": "b8f215a293adbf86",
        "type": "ui-spacer",
        "group": "4f854fe43a9cd673",
        "name": "spacer",
        "tooltip": "",
        "order": 6,
        "width": 1,
        "height": 1,
        "className": ""
    },
    {
        "id": "86b0159d79d02f30",
        "type": "ui-spacer",
        "group": "4f854fe43a9cd673",
        "name": "spacer1223",
        "tooltip": "",
        "order": 7,
        "width": 1,
        "height": 1,
        "className": ""
    },
    {
        "id": "7f80eb023b71c032",
        "type": "ui-page",
        "name": "Analyzing the user consumption",
        "ui": "38228510344247f8",
        "path": "/page5",
        "icon": "home",
        "layout": "grid",
        "theme": "60ac3cbdefc9f2e1",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 4,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "b2c938b22023af62",
        "type": "ui-group",
        "name": "Analyzing the user consumption",
        "page": "7f80eb023b71c032",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "f5eaae4a778e2445",
        "type": "ui-page",
        "name": "Weather and Solar",
        "ui": "38228510344247f8",
        "path": "/page6",
        "icon": "home",
        "layout": "grid",
        "theme": "60ac3cbdefc9f2e1",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "de2e65c80c92d925",
        "type": "ui-group",
        "name": "Weather Condions",
        "page": "f5eaae4a778e2445",
        "width": 6,
        "height": 1,
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "17711f1d3210f27b",
        "type": "ui-page",
        "name": "Energy Dashboard",
        "ui": "38228510344247f8",
        "path": "/page7",
        "icon": "home",
        "layout": "grid",
        "theme": "60ac3cbdefc9f2e1",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 3,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "63e1c09fac0e4fb2",
        "type": "ui-group",
        "name": "Toatal Consumption & Forcasting",
        "page": "17711f1d3210f27b",
        "width": 6,
        "height": 1,
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "50362ba22c608976",
        "type": "ui-group",
        "name": "tebber Api",
        "page": "e750ccb69fac362c",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "7c98a50e31ce9ec5",
        "type": "ui-group",
        "name": "Battery Level",
        "page": "7f80eb023b71c032",
        "width": 6,
        "height": 1,
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "4a1023b86668de2d",
        "type": "ui-group",
        "name": "Solar Production",
        "page": "f5eaae4a778e2445",
        "width": 6,
        "height": 1,
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "07f85c66a45b24c7",
        "type": "ui-group",
        "name": "Date Range",
        "page": "f5eaae4a778e2445",
        "width": "15",
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "5feffaf0e3a5c955",
        "type": "ui-group",
        "name": "Date Range",
        "page": "17711f1d3210f27b",
        "width": "15",
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "71944814518638a1",
        "type": "ui-group",
        "name": "Grind and Negative Prices",
        "page": "17711f1d3210f27b",
        "width": 6,
        "height": 1,
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "758bbe8a1baae6c0",
        "type": "comment",
        "z": "6912ad3d7a04a7bd",
        "name": "User Authentication",
        "info": "Table Design\n\n",
        "x": 150,
        "y": 180,
        "wires": []
    },
    {
        "id": "34e697c94da4e18e",
        "type": "function",
        "z": "6912ad3d7a04a7bd",
        "name": "Logout",
        "func": "global.set(\"user\", null);\n\nreturn [\n    {\n        payload: {\n            \"page\": \"Login\",\n            \"pages\": {\n                \"hide\": [\"Dashboard\", \"User\"],\n                \"show\": [\"Login\", \"Sign Up\"]\n            }\n        }\n    },\n    {\n        payload: \"Successfully logged out\"\n    }\n];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 780,
        "wires": [
            [
                "6a258f0deb30e8a7"
            ],
            [
                "21a0770d7ff34e63"
            ]
        ]
    },
    {
        "id": "2661950aa5e19493",
        "type": "switch",
        "z": "6912ad3d7a04a7bd",
        "name": "",
        "property": "payload.password",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "payload.passwordConfirm",
                "vt": "msg"
            },
            {
                "t": "neq",
                "v": "payload.passwordConfirm",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 600,
        "wires": [
            [
                "1038d41c43b8ddc6"
            ],
            [
                "299bb9708a7b782d",
                "ec4fbdf45f0439c0"
            ]
        ]
    },
    {
        "id": "1038d41c43b8ddc6",
        "type": "function",
        "z": "6912ad3d7a04a7bd",
        "name": "Hash password",
        "func": "const encoder = new util.TextEncoder()\nconst data = encoder.encode(msg.payload.password)\nconst hashBuffer = await crypto.subtle.digest('SHA-256', data)\nconst hashArray = Array.from(new Uint8Array(hashBuffer))\nconst pass = hashArray.map(b => b.toString(16).padStart(2, '0')).join('')\n\nmsg.topic = `INSERT INTO users (username, password)\n            VALUES ('${msg.payload.username}', '${pass}');`\nreturn {\n    params: {\n        $username: msg.payload.username,\n        $password: pass\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 420,
        "y": 540,
        "wires": [
            [
                "76fc568baef722ef"
            ]
        ]
    },
    {
        "id": "76fc568baef722ef",
        "type": "sqlite",
        "z": "6912ad3d7a04a7bd",
        "mydb": "e83b4a7ea1491943",
        "sqlquery": "prepared",
        "sql": "INSERT INTO users (username, password) VALUES ($username, $password);",
        "name": "SQL Create user",
        "x": 630,
        "y": 540,
        "wires": [
            [
                "ca99c2f66bc9b221"
            ]
        ]
    },
    {
        "id": "299bb9708a7b782d",
        "type": "function",
        "z": "6912ad3d7a04a7bd",
        "name": "Passwords don't match",
        "func": "msg.payload = `<p style=\"color: red;\">Passwords don't match</p>`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 680,
        "wires": [
            [
                "21a0770d7ff34e63"
            ]
        ]
    },
    {
        "id": "43632276a84e2dca",
        "type": "function",
        "z": "6912ad3d7a04a7bd",
        "name": "Login",
        "func": "global.set(\"user\", msg.payload[0]);\n\nreturn {\n    payload: {\n        page: 'Dashboard',\n        pages: {\n            show: [\"Dashboard\", \"User\"],\n            hide: [\"Login\", \"Sign Up\"]\n        }\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 460,
        "wires": [
            [
                "6a258f0deb30e8a7"
            ]
        ]
    },
    {
        "id": "7f7652150ba575ab",
        "type": "function",
        "z": "6912ad3d7a04a7bd",
        "name": "Page permissions",
        "func": "const user = global.get(\"user\")\n\nconst page = msg.name\nglobal.set(\"currentPage\", page);\n\nconst allowSignUp = global.get(\"allowSignUp\")\n\nmsg.payload = {}\n\nif (!allowSignUp && page == 'Sign Up') msg.payload = \"Login\"\n\nif (!['Login', ...(allowSignUp ? ['Sign Up'] : [])].includes(page)) {\n    if (!user) msg.payload = \"Login\"\n} else{\n    if (user) msg.payload = \"Dashboard\"\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 380,
        "wires": [
            [
                "6a258f0deb30e8a7"
            ]
        ]
    },
    {
        "id": "ba5efde3dffc8413",
        "type": "change",
        "z": "6912ad3d7a04a7bd",
        "name": "Enable Sign Up",
        "rules": [
            {
                "t": "set",
                "p": "allowSignUp",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 180,
        "wires": [
            [
                "a860e462d16982d5"
            ]
        ]
    },
    {
        "id": "e4f3fa8e4e4f5241",
        "type": "inject",
        "z": "6912ad3d7a04a7bd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 600,
        "y": 180,
        "wires": [
            [
                "ba5efde3dffc8413"
            ]
        ]
    },
    {
        "id": "939acc55a206e249",
        "type": "change",
        "z": "6912ad3d7a04a7bd",
        "name": "Disable Sign Up",
        "rules": [
            {
                "t": "set",
                "p": "allowSignUp",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 220,
        "wires": [
            [
                "4f47e426e2671699"
            ]
        ]
    },
    {
        "id": "d113b540c174657e",
        "type": "inject",
        "z": "6912ad3d7a04a7bd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 600,
        "y": 220,
        "wires": [
            [
                "939acc55a206e249"
            ]
        ]
    },
    {
        "id": "296d1c1f5047b357",
        "type": "function",
        "z": "6912ad3d7a04a7bd",
        "name": "User already exists | error",
        "func": "const text = msg.error.message == \"Error: SQLITE_CONSTRAINT: UNIQUE constraint failed: users.username\"\n    ? \"User already exists\"\n    : msg.error.message\nreturn { payload: `<p style=\"color: red;\">${text}</p>` };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 620,
        "wires": [
            [
                "21a0770d7ff34e63"
            ]
        ]
    },
    {
        "id": "34c821dbc820789c",
        "type": "catch",
        "z": "6912ad3d7a04a7bd",
        "name": "",
        "scope": [
            "76fc568baef722ef"
        ],
        "uncaught": false,
        "x": 510,
        "y": 620,
        "wires": [
            [
                "296d1c1f5047b357"
            ]
        ]
    },
    {
        "id": "b9b5614c7dff264a",
        "type": "function",
        "z": "6912ad3d7a04a7bd",
        "name": "Hash password",
        "func": "const encoder = new util.TextEncoder()\nconst data = encoder.encode(msg.payload.password)\nconst hashBuffer = await crypto.subtle.digest('SHA-256', data)\nconst hashArray = Array.from(new Uint8Array(hashBuffer))\nconst pass = hashArray.map(b => b.toString(16).padStart(2, '0')).join('')\n\nreturn {\n    params: {\n        $username: msg.payload.username,\n        $password: pass\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 480,
        "y": 460,
        "wires": [
            [
                "ca99c2f66bc9b221"
            ]
        ]
    },
    {
        "id": "ca99c2f66bc9b221",
        "type": "sqlite",
        "z": "6912ad3d7a04a7bd",
        "mydb": "e83b4a7ea1491943",
        "sqlquery": "prepared",
        "sql": "SELECT * FROM users \nWHERE username = $username\nAND password = $password\nLIMIT 1;",
        "name": "Get user",
        "x": 680,
        "y": 460,
        "wires": [
            [
                "1b38b1ec1ed249aa"
            ]
        ]
    },
    {
        "id": "a860e462d16982d5",
        "type": "function",
        "z": "6912ad3d7a04a7bd",
        "name": "Show New user",
        "func": "return {\n    payload: {\n        groups: {\n            show: ['Login:Sub-Login']\n        },\n        \"pages\": {\n            \"show\": [\"Sign Up\"]\n        }\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 180,
        "wires": [
            [
                "6a258f0deb30e8a7"
            ]
        ]
    },
    {
        "id": "4f47e426e2671699",
        "type": "function",
        "z": "6912ad3d7a04a7bd",
        "name": "Hide New user",
        "func": "return {\n    payload: {\n        groups: {\n            hide: ['Login:Sub-Login']\n        },\n        \"pages\": {\n            \"hide\": [\"Sign Up\"]\n        }\n    }\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 220,
        "wires": [
            [
                "6a258f0deb30e8a7"
            ]
        ]
    },
    {
        "id": "1b38b1ec1ed249aa",
        "type": "switch",
        "z": "6912ad3d7a04a7bd",
        "name": "User exists",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 460,
        "wires": [
            [
                "43632276a84e2dca"
            ],
            [
                "9b60cd0b89fd6534"
            ]
        ]
    },
    {
        "id": "9b60cd0b89fd6534",
        "type": "function",
        "z": "6912ad3d7a04a7bd",
        "name": "Bad credentials",
        "func": "msg.payload = `<p style=\"color: red;\">Wrong user or password</p>`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 520,
        "wires": [
            [
                "21a0770d7ff34e63"
            ]
        ]
    },
    {
        "id": "4c8391745dc721c7",
        "type": "function",
        "z": "6912ad3d7a04a7bd",
        "name": "Get current username",
        "func": "return { payload: global.get(\"user\")?.username };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 320,
        "wires": [
            [
                "ca837ca722728964"
            ]
        ]
    },
    {
        "id": "ad1f09f897a372dc",
        "type": "ui-form",
        "z": "6912ad3d7a04a7bd",
        "name": "Login",
        "group": "2f47a39f3cc9930a",
        "label": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "key": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "key": "password",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "password": ""
        },
        "payload": "",
        "submit": "Login",
        "cancel": "Clear",
        "resetOnSubmit": true,
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "dropdownOptions": [],
        "x": 300,
        "y": 460,
        "wires": [
            [
                "b9b5614c7dff264a"
            ]
        ]
    },
    {
        "id": "ec4fbdf45f0439c0",
        "type": "ui-form",
        "z": "6912ad3d7a04a7bd",
        "name": "Sign up",
        "group": "e0f7da5a3b24256b",
        "label": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Username",
                "key": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "key": "password",
                "type": "password",
                "required": true,
                "rows": null
            },
            {
                "label": "Confirm password",
                "key": "passwordConfirm",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "password": "",
            "passwordConfirm": ""
        },
        "payload": "",
        "submit": "Submit",
        "cancel": "Clear",
        "resetOnSubmit": true,
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "dropdownOptions": [],
        "x": 100,
        "y": 600,
        "wires": [
            [
                "2661950aa5e19493"
            ]
        ]
    },
    {
        "id": "85c88bb25ccfa16c",
        "type": "ui-button",
        "z": "6912ad3d7a04a7bd",
        "group": "a7d84b864bcdbb8d",
        "name": "Log Out",
        "label": "Log Out",
        "order": 2,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 440,
        "y": 780,
        "wires": [
            [
                "34e697c94da4e18e"
            ]
        ]
    },
    {
        "id": "1b3d1d8f7a398607",
        "type": "ui-button",
        "z": "6912ad3d7a04a7bd",
        "group": "1dd26d328a9f311f",
        "name": "Sign up link",
        "label": "New user",
        "order": 1,
        "width": 0,
        "height": 0,
        "emulateClick": true,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "Sign Up",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 930,
        "y": 140,
        "wires": [
            [
                "6a258f0deb30e8a7"
            ]
        ]
    },
    {
        "id": "ec1ccb5848100e40",
        "type": "ui-button",
        "z": "6912ad3d7a04a7bd",
        "group": "d5dc624819206887",
        "name": "Login link",
        "label": "Already have a user",
        "order": 1,
        "width": 0,
        "height": 0,
        "emulateClick": true,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "Login",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 920,
        "y": 260,
        "wires": [
            [
                "6a258f0deb30e8a7"
            ]
        ]
    },
    {
        "id": "ca837ca722728964",
        "type": "ui-text",
        "z": "6912ad3d7a04a7bd",
        "group": "a7d84b864bcdbb8d",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Current user",
        "label": "Current User:",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "",
        "fontSize": "19",
        "color": "#0956f1",
        "wrapText": false,
        "className": "{{msg.payload}}",
        "x": 930,
        "y": 320,
        "wires": []
    },
    {
        "id": "21a0770d7ff34e63",
        "type": "ui-notification",
        "z": "6912ad3d7a04a7bd",
        "ui": "38228510344247f8",
        "position": "top center",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "5",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": false,
        "dismissText": "",
        "allowConfirm": false,
        "confirmText": "",
        "raw": true,
        "className": "",
        "name": "Notification",
        "x": 1170,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "6a258f0deb30e8a7",
        "type": "ui-control",
        "z": "6912ad3d7a04a7bd",
        "name": "",
        "ui": "38228510344247f8",
        "events": "all",
        "x": 1220,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "bd899096891058a2",
        "type": "ui-control",
        "z": "6912ad3d7a04a7bd",
        "name": "",
        "ui": "38228510344247f8",
        "events": "all",
        "x": 480,
        "y": 340,
        "wires": [
            [
                "7f7652150ba575ab",
                "4c8391745dc721c7"
            ]
        ]
    },
    {
        "id": "6c60ba79a3968ab8",
        "type": "debug",
        "z": "6912ad3d7a04a7bd",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 660,
        "wires": []
    },
    {
        "id": "5e92e2fee05595a3",
        "type": "sqlite",
        "z": "6912ad3d7a04a7bd",
        "mydb": "e83b4a7ea1491943",
        "sqlquery": "fixed",
        "sql": "SELECT * FROM users LIMIT 20",
        "name": "view user",
        "x": 1180,
        "y": 740,
        "wires": [
            [
                "6c60ba79a3968ab8"
            ]
        ]
    },
    {
        "id": "62ec65afcc37eb5a",
        "type": "inject",
        "z": "6912ad3d7a04a7bd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 980,
        "y": 780,
        "wires": [
            [
                "5e92e2fee05595a3"
            ]
        ]
    },
    {
        "id": "1207ab89c8b2f804",
        "type": "comment",
        "z": "4f197a1ac03259d0",
        "name": "Api Data Querry ",
        "info": "",
        "x": 520,
        "y": 40,
        "wires": []
    },
    {
        "id": "f0a970a82f7c0c68",
        "type": "comment",
        "z": "4f197a1ac03259d0",
        "name": "Hardware_data_querry",
        "info": "",
        "x": 660,
        "y": 640,
        "wires": []
    },
    {
        "id": "32e2bec2664d6799",
        "type": "file",
        "z": "4f197a1ac03259d0",
        "name": "temp_market_price",
        "filename": "/home/pi/.node-red/projects/Project/temporal_file/temp_market_prices.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1110,
        "y": 400,
        "wires": [
            [
                "f259e687832ad330"
            ]
        ]
    },
    {
        "id": "6ce78b6b369ffff1",
        "type": "file",
        "z": "4f197a1ac03259d0",
        "name": "temp_grid_price",
        "filename": "/home/pi/.node-red/projects/Project/temporal_file/temp_grid_price.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1100,
        "y": 340,
        "wires": [
            [
                "f259e687832ad330",
                "f9a20ac9abfcebc5"
            ]
        ]
    },
    {
        "id": "2bcd55f22d8dd5a9",
        "type": "file",
        "z": "4f197a1ac03259d0",
        "name": "temp_consump_shelly",
        "filename": "/home/pi/.node-red/projects/Project/temporal_file/consumption/temp_data1.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1260,
        "y": 520,
        "wires": [
            [
                "f1f1544fb51c5228"
            ]
        ]
    },
    {
        "id": "d94153e716c850fd",
        "type": "file",
        "z": "4f197a1ac03259d0",
        "name": "temp_solar",
        "filename": "/home/pi/.node-red/projects/Project/temporal_file/temp_solar_data.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1090,
        "y": 160,
        "wires": [
            [
                "f259e687832ad330"
            ]
        ]
    },
    {
        "id": "3fb6d188b0ca3098",
        "type": "file",
        "z": "4f197a1ac03259d0",
        "name": "temp_consum",
        "filename": "/home/pi/.node-red/projects/Project/temporal_file/temp_user_consumption.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1100,
        "y": 460,
        "wires": [
            [
                "f259e687832ad330"
            ]
        ]
    },
    {
        "id": "e9cf1031970a6702",
        "type": "file",
        "z": "4f197a1ac03259d0",
        "name": "temp_weather_data",
        "filename": "/home/pi/.node-red/projects/Project/temporal_file/temp_weather.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1120,
        "y": 80,
        "wires": [
            [
                "f259e687832ad330"
            ]
        ]
    },
    {
        "id": "9a90f52afcac38b6",
        "type": "shelly-gen2",
        "z": "4f197a1ac03259d0",
        "hostname": "192.168.2.104",
        "description": "shellypro3em-a0dd6ca190cc",
        "mode": "polling",
        "verbose": false,
        "server": "",
        "outputmode": "event",
        "uploadretryinterval": 5000,
        "pollinginterval": 5000,
        "pollstatus": false,
        "getstatusoncommand": true,
        "devicetype": "SPEM-003CEBEU",
        "devicetypemustmatchexactly": true,
        "captureblutooth": false,
        "outputs": 1,
        "x": 760,
        "y": 540,
        "wires": [
            [
                "b477914f344dcba2"
            ]
        ]
    },
    {
        "id": "f259e687832ad330",
        "type": "join",
        "z": "4f197a1ac03259d0",
        "name": "have all data",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1480,
        "y": 280,
        "wires": [
            [
                "69e66e41133da508"
            ]
        ]
    },
    {
        "id": "69e66e41133da508",
        "type": "delay",
        "z": "4f197a1ac03259d0",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1660,
        "y": 280,
        "wires": [
            [
                "c0071d0b8b153941"
            ]
        ]
    },
    {
        "id": "143a64dad64cabcc",
        "type": "sqlite",
        "z": "4f197a1ac03259d0",
        "mydb": "962221d873768ba1",
        "sqlquery": "fixed",
        "sql": "SELECT * FROM data LIMIT 10000",
        "name": "Api_database",
        "x": 2320,
        "y": 480,
        "wires": [
            [
                "b6b86c4533428505",
                "48e77498171cd66c"
            ]
        ]
    },
    {
        "id": "291e86a2e348d7d1",
        "type": "exec",
        "z": "4f197a1ac03259d0",
        "command": "python3 -u /home/pi/.node-red/projects/Project/scripts/battery.py",
        "addpay": "topic",
        "append": "1",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "charge_battery",
        "x": 680,
        "y": 780,
        "wires": [
            [
                "9e5b8309ea802eb9"
            ],
            [],
            []
        ]
    },
    {
        "id": "22bcc9c9defdb24b",
        "type": "exec",
        "z": "4f197a1ac03259d0",
        "command": "python3  -u /home/pi/.node-red/projects/Project/scripts/battery.py ",
        "addpay": "topic",
        "append": "2",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "discharge_battery",
        "x": 690,
        "y": 860,
        "wires": [
            [
                "adcb46c63190de66"
            ],
            [],
            []
        ]
    },
    {
        "id": "9e5b8309ea802eb9",
        "type": "debug",
        "z": "4f197a1ac03259d0",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 760,
        "wires": []
    },
    {
        "id": "9cce8dfb2e92a5a0",
        "type": "exec",
        "z": "4f197a1ac03259d0",
        "command": "python3 -u /home/pi/.node-red/projects/Project/scripts/battery.py",
        "addpay": "topic",
        "append": "3",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "battery_status",
        "x": 680,
        "y": 1020,
        "wires": [
            [
                "f8c956d71ff78cb6",
                "4669cde437f0bf40",
                "66c008c2303356ad"
            ],
            [],
            []
        ]
    },
    {
        "id": "adcb46c63190de66",
        "type": "debug",
        "z": "4f197a1ac03259d0",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 840,
        "wires": []
    },
    {
        "id": "f8c956d71ff78cb6",
        "type": "debug",
        "z": "4f197a1ac03259d0",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 1000,
        "wires": []
    },
    {
        "id": "c12b533134e118d6",
        "type": "delay",
        "z": "4f197a1ac03259d0",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 80,
        "wires": [
            [
                "95656262bdebca0c"
            ]
        ]
    },
    {
        "id": "5a086b7c6c0946b7",
        "type": "delay",
        "z": "4f197a1ac03259d0",
        "name": "",
        "pauseType": "delay",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 340,
        "wires": [
            [
                "1e5dec98b2d97cc3"
            ]
        ]
    },
    {
        "id": "4a65ee1bdbcd0fd7",
        "type": "delay",
        "z": "4f197a1ac03259d0",
        "name": "",
        "pauseType": "delay",
        "timeout": "18",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 400,
        "wires": [
            [
                "f0bc0b2d7ba5484a"
            ]
        ]
    },
    {
        "id": "3e5af9a8aa3ccae3",
        "type": "delay",
        "z": "4f197a1ac03259d0",
        "name": "",
        "pauseType": "delay",
        "timeout": "6",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 160,
        "wires": [
            [
                "c36d623b44c475f0"
            ]
        ]
    },
    {
        "id": "48f068536eb824e0",
        "type": "delay",
        "z": "4f197a1ac03259d0",
        "name": "",
        "pauseType": "delay",
        "timeout": "21",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 460,
        "wires": [
            [
                "cbeb37f343898efe"
            ]
        ]
    },
    {
        "id": "38cb03c87f7afa89",
        "type": "delay",
        "z": "4f197a1ac03259d0",
        "name": "",
        "pauseType": "delay",
        "timeout": "9",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "8779e3ca9988dd19",
        "type": "delay",
        "z": "4f197a1ac03259d0",
        "name": "",
        "pauseType": "delay",
        "timeout": "12",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 280,
        "wires": [
            [
                "2f62ef67c96f74ac"
            ]
        ]
    },
    {
        "id": "15b390bf6afbdd51",
        "type": "file",
        "z": "4f197a1ac03259d0",
        "name": "temp_negative_prices",
        "filename": "/home/pi/.node-red/projects/Project/temporal_file/temp_negative_prices.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1120,
        "y": 280,
        "wires": [
            [
                "f259e687832ad330"
            ]
        ]
    },
    {
        "id": "07f31524fee6bfb8",
        "type": "file",
        "z": "4f197a1ac03259d0",
        "name": "temp_solar_user_caliberated",
        "filename": "/home/pi/.node-red/projects/Project/temporal_file/temp_solar_user_caliberated.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1140,
        "y": 220,
        "wires": [
            [
                "f259e687832ad330"
            ]
        ]
    },
    {
        "id": "a9a6387bbfa5e51f",
        "type": "shelly-gen2",
        "z": "4f197a1ac03259d0",
        "hostname": "192.168.2.102",
        "description": "shelly_switch",
        "mode": "polling",
        "verbose": false,
        "server": "",
        "outputmode": "event",
        "uploadretryinterval": 5000,
        "pollinginterval": 5000,
        "pollstatus": false,
        "getstatusoncommand": true,
        "devicetype": "Relay",
        "devicetypemustmatchexactly": true,
        "captureblutooth": false,
        "outputs": 1,
        "x": 670,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "7b5d198d28ab4662",
        "type": "delay",
        "z": "4f197a1ac03259d0",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 400,
        "y": 680,
        "wires": [
            [
                "a9a6387bbfa5e51f"
            ]
        ]
    },
    {
        "id": "3df338df1d83b309",
        "type": "comment",
        "z": "4f197a1ac03259d0",
        "name": "meter_readings",
        "info": "",
        "x": 720,
        "y": 500,
        "wires": []
    },
    {
        "id": "41d14b51e26e1384",
        "type": "inject",
        "z": "4f197a1ac03259d0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 680,
        "wires": [
            [
                "7b5d198d28ab4662"
            ]
        ]
    },
    {
        "id": "9eb0125ac6550100",
        "type": "inject",
        "z": "4f197a1ac03259d0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 780,
        "wires": [
            [
                "291e86a2e348d7d1"
            ]
        ]
    },
    {
        "id": "dd6ece493dd53997",
        "type": "inject",
        "z": "4f197a1ac03259d0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 860,
        "wires": [
            [
                "22bcc9c9defdb24b"
            ]
        ]
    },
    {
        "id": "e2855ecd08bc80fe",
        "type": "exec",
        "z": "4f197a1ac03259d0",
        "command": "pkill -f \"python3 -u /home/pi/.node-red/projects/Project/scripts/battery.py\"",
        "addpay": "",
        "append": "",
        "useSpawn": "true",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "stop",
        "x": 650,
        "y": 940,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "2f6886dfeda60a4a",
        "type": "inject",
        "z": "4f197a1ac03259d0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 940,
        "wires": [
            [
                "e2855ecd08bc80fe"
            ]
        ]
    },
    {
        "id": "80d455359251b570",
        "type": "inject",
        "z": "4f197a1ac03259d0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 1020,
        "wires": [
            [
                "9cce8dfb2e92a5a0"
            ]
        ]
    },
    {
        "id": "95656262bdebca0c",
        "type": "pythonshell in",
        "z": "4f197a1ac03259d0",
        "name": "get_weather_data",
        "pyfile": "/home/pi/.node-red/projects/Project/scripts/get_weather_data.py",
        "virtualenv": "",
        "continuous": false,
        "stdInData": false,
        "x": 750,
        "y": 80,
        "wires": [
            [
                "e9cf1031970a6702"
            ]
        ]
    },
    {
        "id": "1e5dec98b2d97cc3",
        "type": "pythonshell in",
        "z": "4f197a1ac03259d0",
        "name": "get_grid_price",
        "pyfile": "/home/pi/.node-red/projects/Project/scripts/get_grid_prices.py",
        "virtualenv": "",
        "continuous": false,
        "stdInData": false,
        "x": 740,
        "y": 340,
        "wires": [
            [
                "6ce78b6b369ffff1"
            ]
        ]
    },
    {
        "id": "f0bc0b2d7ba5484a",
        "type": "pythonshell in",
        "z": "4f197a1ac03259d0",
        "name": "get_market_price",
        "pyfile": "/home/pi/.node-red/projects/Project/scripts/get_market_price.py",
        "virtualenv": "",
        "continuous": false,
        "stdInData": false,
        "x": 750,
        "y": 400,
        "wires": [
            [
                "32e2bec2664d6799",
                "82fb81b4502b7dde"
            ]
        ]
    },
    {
        "id": "cbeb37f343898efe",
        "type": "pythonshell in",
        "z": "4f197a1ac03259d0",
        "name": "get_energy_consumption_from_user(tibber)",
        "pyfile": "/home/pi/.node-red/projects/Project/scripts/get_consumption_from_user.py",
        "virtualenv": "",
        "continuous": false,
        "stdInData": false,
        "x": 830,
        "y": 460,
        "wires": [
            [
                "3fb6d188b0ca3098"
            ]
        ]
    },
    {
        "id": "c0071d0b8b153941",
        "type": "pythonshell in",
        "z": "4f197a1ac03259d0",
        "name": "combine_sort_and_append_to_data_base",
        "pyfile": "/home/pi/.node-red/projects/Project/scripts/combine_sort_and_append.py",
        "virtualenv": "",
        "continuous": false,
        "stdInData": false,
        "x": 1940,
        "y": 280,
        "wires": [
            [
                "143a64dad64cabcc"
            ]
        ]
    },
    {
        "id": "c36d623b44c475f0",
        "type": "pythonshell in",
        "z": "4f197a1ac03259d0",
        "name": "get_solar_data(fixed calibration)",
        "pyfile": "/home/pi/.node-red/projects/Project/scripts/get_solar_data.py",
        "virtualenv": "",
        "continuous": false,
        "stdInData": false,
        "x": 790,
        "y": 160,
        "wires": [
            [
                "d94153e716c850fd",
                "c238f5504242820d"
            ]
        ]
    },
    {
        "id": "2f62ef67c96f74ac",
        "type": "pythonshell in",
        "z": "4f197a1ac03259d0",
        "name": "get_negative_prices",
        "pyfile": "/home/pi/.node-red/projects/Project/scripts/get_negative_prices.py",
        "virtualenv": "",
        "continuous": false,
        "stdInData": false,
        "x": 760,
        "y": 280,
        "wires": [
            [
                "15b390bf6afbdd51",
                "659fa8ea788c463a"
            ]
        ]
    },
    {
        "id": "8e5e53ca363cc8c7",
        "type": "pythonshell in",
        "z": "4f197a1ac03259d0",
        "name": "solar_energy(user's calibration)",
        "pyfile": "/home/pi/.node-red/projects/Project/scripts/solar_radiation.py",
        "virtualenv": "",
        "continuous": false,
        "stdInData": false,
        "x": 790,
        "y": 220,
        "wires": [
            [
                "07f31524fee6bfb8"
            ]
        ]
    },
    {
        "id": "89346c3eb7a35b8c",
        "type": "inject",
        "z": "4f197a1ac03259d0",
        "name": "start_querry_15 min delay data_signal",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 260,
        "wires": [
            [
                "c12b533134e118d6",
                "48f068536eb824e0",
                "3e5af9a8aa3ccae3",
                "38cb03c87f7afa89",
                "8779e3ca9988dd19",
                "5a086b7c6c0946b7",
                "4a65ee1bdbcd0fd7"
            ]
        ]
    },
    {
        "id": "74c975dd5fcaf451",
        "type": "inject",
        "z": "4f197a1ac03259d0",
        "name": "start 10 min delay",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 540,
        "wires": [
            [
                "9a90f52afcac38b6"
            ]
        ]
    },
    {
        "id": "b477914f344dcba2",
        "type": "python3-function",
        "z": "4f197a1ac03259d0",
        "name": "shelly to dataBase",
        "func": "import datetime\n\n# Create ISO timestamp string for today\n#today = datetime.datetime.today()\n\n# Subtract one day to get yesterday's date\n#yesterday = today - datetime.timedelta(days=1)\n\n# Generate the ISO timestamp for yesterday\n#timestamp = yesterday.isoformat()\n\ntimestamp = datetime.datetime.now().isoformat()\n\n# Flatten em0 and emdata0 and add timestamp\nmsg1 = {'payload': {'Date': timestamp[:10], 'Time' : timestamp[11:19],**msg['payload']['em0']}}\nmsg2 = {'payload': {'Date': timestamp[:10], 'Time' : timestamp[11:19],**msg['payload']['emdata0']}}\n\n# Return both messages ready to be written as CSV rows\nreturn msg1, msg2\n",
        "outputs": 2,
        "x": 1010,
        "y": 540,
        "wires": [
            [
                "2bcd55f22d8dd5a9"
            ],
            [
                "77953dac93903f63"
            ]
        ]
    },
    {
        "id": "77953dac93903f63",
        "type": "file",
        "z": "4f197a1ac03259d0",
        "name": "temp_consump_shelly",
        "filename": "/home/pi/.node-red/projects/Project/temporal_file/consumption/temp_data2.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1260,
        "y": 560,
        "wires": [
            [
                "f1f1544fb51c5228"
            ]
        ]
    },
    {
        "id": "f1f1544fb51c5228",
        "type": "join",
        "z": "4f197a1ac03259d0",
        "name": "have all data",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1480,
        "y": 540,
        "wires": [
            [
                "623d973206ba46da"
            ]
        ]
    },
    {
        "id": "623d973206ba46da",
        "type": "delay",
        "z": "4f197a1ac03259d0",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1660,
        "y": 540,
        "wires": [
            [
                "d21d8ecc18c5dcc9"
            ]
        ]
    },
    {
        "id": "d21d8ecc18c5dcc9",
        "type": "pythonshell in",
        "z": "4f197a1ac03259d0",
        "name": "combine_sort_and_append_to_data_base",
        "pyfile": "/home/pi/.node-red/projects/Project/scripts/combine_sort_and_append_consumption.py",
        "virtualenv": "",
        "continuous": false,
        "stdInData": false,
        "x": 1940,
        "y": 540,
        "wires": [
            [
                "eb1f84f123b1340d"
            ]
        ]
    },
    {
        "id": "eb1f84f123b1340d",
        "type": "sqlite",
        "z": "4f197a1ac03259d0",
        "mydb": "6c03dff826846f79",
        "sqlquery": "fixed",
        "sql": "SELECT * FROM consumption LIMIT 1000",
        "name": "consumption_database",
        "x": 2310,
        "y": 540,
        "wires": [
            [
                "74fa4322bd9d85a3"
            ]
        ]
    },
    {
        "id": "66c008c2303356ad",
        "type": "ui-template",
        "z": "4f197a1ac03259d0",
        "d": true,
        "group": "4f854fe43a9cd673",
        "page": "",
        "ui": "",
        "name": "Battery Info (Styled)",
        "order": 2,
        "width": 6,
        "height": 2,
        "format": "<p style=\"white-space: pre-line; font-weight: bold; color: #b30000;\">\n  {{msg.payload}}\n</p>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1020,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "4669cde437f0bf40",
        "type": "ui-text",
        "z": "4f197a1ac03259d0",
        "group": "7c98a50e31ce9ec5",
        "order": 1,
        "width": 6,
        "height": 1,
        "name": "Battery Info ",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "wrapText": false,
        "className": "",
        "x": 970,
        "y": 1080,
        "wires": []
    },
    {
        "id": "74fa4322bd9d85a3",
        "type": "debug",
        "z": "4f197a1ac03259d0",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2560,
        "y": 540,
        "wires": []
    },
    {
        "id": "c238f5504242820d",
        "type": "debug",
        "z": "4f197a1ac03259d0",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 120,
        "wires": []
    },
    {
        "id": "b6b86c4533428505",
        "type": "debug",
        "z": "4f197a1ac03259d0",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2560,
        "y": 480,
        "wires": []
    },
    {
        "id": "82fb81b4502b7dde",
        "type": "debug",
        "z": "4f197a1ac03259d0",
        "name": "debug 11",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 380,
        "wires": []
    },
    {
        "id": "659fa8ea788c463a",
        "type": "debug",
        "z": "4f197a1ac03259d0",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 260,
        "wires": []
    },
    {
        "id": "f9a20ac9abfcebc5",
        "type": "debug",
        "z": "4f197a1ac03259d0",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 360,
        "wires": []
    },
    {
        "id": "48e77498171cd66c",
        "type": "function",
        "z": "4f197a1ac03259d0",
        "name": "Fetch and Clean Energy Data",
        "func": "// Filter and map energy forecast data\nmsg.payload = msg.payload\n  .filter(row =>\n    row[\"market_prices[EUR/kWh]\"] !== null &&\n    row[\"Negative_prices[EUR/kWh]\"] !== null &&\n    row[\"Solar_Production_Estimate[kW]\"] !== null &&\n    row[\"Consumption[kWh]\"] !== null &&\n    row[\"Grid_prices [EUR/kWh]\"] !== null &&\n    row[\"Date\"] !== null &&\n    row[\"Time\"] !== null\n  )\n  .map(row => ({\n    ...row,\n    market_price: parseFloat(row[\"market_prices[EUR/kWh]\"]),\n    negative_price: parseFloat(row[\"Negative_prices[EUR/kWh]\"]),\n    solar_production: parseFloat(row[\"Solar_Production_Estimate[kW]\"]),\n    consumption: parseFloat(row[\"Consumption[kWh]\"]),\n    grid_price: parseFloat(row[\"Grid_prices [EUR/kWh]\"])\n  }));\n\nmsg.averagePrice = msg.payload.reduce((sum, r) => sum + r.market_price, 0) / msg.payload.length;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 320,
        "wires": [
            [
                "9a8c8491c418493d"
            ]
        ]
    },
    {
        "id": "9a8c8491c418493d",
        "type": "debug",
        "z": "4f197a1ac03259d0",
        "name": "debug 13",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2620,
        "y": 220,
        "wires": []
    },
    {
        "id": "3e45f54e8c3d0a7d",
        "type": "function",
        "z": "d7a5356611a97fea",
        "name": "Negative prices",
        "func": "let negative_price = [];\n\nmsg.payload.forEach(row => {\n    // Format the timestamp to \"dd/LL HH:mm\"\n    const timestamp = new Date(`${row.Date}T${row.Time}:00`);\n    const formattedTimestamp = `${('0' + timestamp.getDate()).slice(-2)}/${('0' + (timestamp.getMonth() + 1)).slice(-2)} ${('0' + timestamp.getHours()).slice(-2)}:${('0' + timestamp.getMinutes()).slice(-2)}`;\n\n    // Only process Negative Price\n    negative_price.push({ x: formattedTimestamp, y: row['Negative_prices[EUR/kWh]'] });\n});\n\n// If no data for Negative Price, push a default 0 value\nif (negative_price.length === 0) {\n    // Push a default entry with `y: 0`\n    negative_price.push({ x: 'No data', y: 0 });\n}\n\n// Return only Negative Price data\nreturn [\n  { topic: \"Negative Price\", payload: negative_price }\n];\n",
        "outputs": 1,
        "timeout": "40",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 760,
        "wires": [
            [
                "0a672feabad7455c"
            ]
        ]
    },
    {
        "id": "6af255a2f07bd9ac",
        "type": "sqlite",
        "z": "d7a5356611a97fea",
        "mydb": "962221d873768ba1",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Query Energy DB",
        "x": 450,
        "y": 840,
        "wires": [
            [
                "c2834228ad7b9d75",
                "699d17826a82479f",
                "3fa6e2b40344b9ec",
                "f0f0f778038fecfb",
                "9740097335c073b1",
                "40327b072ad696ce",
                "47cd3877b32f078d"
            ]
        ]
    },
    {
        "id": "b7836f94b07efc4d",
        "type": "function",
        "z": "d7a5356611a97fea",
        "name": "Build SQL Query",
        "func": "const startDate = new Date(msg.payload.start);\nconst endDate = new Date(msg.payload.end);\n\nif (isNaN(startDate) || isNaN(endDate)) {\n    node.error(\"Invalid date selected.\");\n    return null;\n}\n\n// Set to start and end of the selected days\nstartDate.setHours(0, 0, 0, 0);\nendDate.setHours(23, 59, 59, 999);\n\n// Format for SQLite datetime comparison (ISO: 'YYYY-MM-DDTHH:MM:SS')\nconst startTime = startDate.toISOString().slice(0, 19);\nconst endTime = endDate.toISOString().slice(0, 19);\n\n// Ensure time field is in HH:MM and padded if needed\n// Final format: 'YYYY-MM-DDTHH:MM:SS'\nmsg.topic = `\n    SELECT * FROM data\n    WHERE datetime(Date || 'T' || substr('0' || Time, -5) || ':00')\n    BETWEEN '${startTime}' AND '${endTime}'\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 840,
        "wires": [
            [
                "6af255a2f07bd9ac",
                "f82ba65cd7cb5dc8"
            ]
        ]
    },
    {
        "id": "0ed95cf8d38fddfe",
        "type": "ui-form",
        "z": "d7a5356611a97fea",
        "name": "Date Range",
        "group": "07f85c66a45b24c7",
        "label": "Select Date Range",
        "order": 1,
        "width": "15",
        "height": "2",
        "options": [
            {
                "label": "Start Date",
                "key": "start",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "End Date",
                "key": "end",
                "type": "date",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "start": "",
            "end": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "clear",
        "resetOnSubmit": false,
        "topic": "",
        "topicType": "str",
        "splitLayout": true,
        "className": "",
        "passthru": false,
        "dropdownOptions": [],
        "x": 170,
        "y": 920,
        "wires": [
            [
                "b7836f94b07efc4d"
            ]
        ]
    },
    {
        "id": "a4dae8ade7b55eb7",
        "type": "ui-chart",
        "z": "d7a5356611a97fea",
        "group": "4a1023b86668de2d",
        "name": "Solar Production",
        "label": "Solar Production (KW)",
        "order": 1,
        "chartType": "bar",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "Time",
        "xAxisProperty": "x",
        "xAxisPropertyType": "property",
        "xAxisType": "category",
        "xAxisFormat": "dd/LL HH:mm",
        "xAxisFormatType": "custom",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "KW",
        "yAxisProperty": "y",
        "yAxisPropertyType": "property",
        "ymin": "0",
        "ymax": "",
        "bins": 10,
        "action": "replace",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#fd7e0e",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 1040,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "f82ba65cd7cb5dc8",
        "type": "function",
        "z": "d7a5356611a97fea",
        "name": "Clear Chart",
        "func": "let weather_values_clearSky = [];\nlet weather_values_mainlyClear = [];\nlet weather_values_partlyCloudy = [];\nlet weather_values_cloudy = [];\nlet weather_values_overcast = [];\nlet weather_values_rainy = [];\nlet solar = [];\nlet weather_text = [];\nlet weather_colors = [];\n\n    return [\n        { topic: \"weather_values_clearSky\", payload: [] },\n        { topic: \"weather_values_mainlyClear\", payload: [] },\n        { topic: \"weather_values_partlyCloudy\", payload: [] },\n        { topic: \"weather_values_cloudy\", payload: [] },\n        { topic: \"weather_values_overcast\", payload: [] },\n        { topic: \"weather_values_rainy\", payload: [] },\n        { topic: \"solar\", payload: [] },\n        { topic: \"weather_text\", payload: [] },\n        { topic: \"weather_colors\", payload: [] },\n    ];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1100,
        "wires": [
            [
                "d6d535b6d6ad4cfa"
            ]
        ]
    },
    {
        "id": "7a6d08f75216129a",
        "type": "debug",
        "z": "d7a5356611a97fea",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 1320,
        "wires": []
    },
    {
        "id": "1fa8f1f295eb23ca",
        "type": "inject",
        "z": "d7a5356611a97fea",
        "name": "Clear Chart",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 1270,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "c2834228ad7b9d75",
        "type": "function",
        "z": "d7a5356611a97fea",
        "name": "clearSky",
        "func": "\n\nlet weather_values_clearSky = [];\n\nmsg.payload.forEach(row => {\n    // Format the timestamp to \"dd/LL HH:mm\"\n    const timestamp = new Date(`${row.Date}T${row.Time}:00`);\n    const formattedTimestamp = `${('0' + timestamp.getDate()).slice(-2)}/${('0' + (timestamp.getMonth() + 1)).slice(-2)} ${('0' + timestamp.getHours()).slice(-2)}:${('0' + timestamp.getMinutes()).slice(-2)}`;\n\n    // Set value to 1 if \"Clear sky\", otherwise 0\n    let value;\n    switch (row['Weather_condition']) {\n        case 'Clear sky': value = 1; break;\n        default: value = 0;\n    }\n\n    weather_values_clearSky.push({ x: formattedTimestamp, y: value });\n});\n\nreturn [\n    { topic: \"Clear sky\", payload: weather_values_clearSky }\n];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1160,
        "wires": [
            [
                "d6d535b6d6ad4cfa"
            ]
        ]
    },
    {
        "id": "d6d535b6d6ad4cfa",
        "type": "ui-chart",
        "z": "d7a5356611a97fea",
        "group": "de2e65c80c92d925",
        "name": "Weather Condition",
        "label": "Weather Condition",
        "order": 1,
        "chartType": "bar",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "x",
        "xAxisPropertyType": "property",
        "xAxisType": "category",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "y",
        "yAxisPropertyType": "property",
        "ymin": "0",
        "ymax": "",
        "bins": "",
        "action": "append",
        "stackSeries": true,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "86400",
        "removeOlderPoints": "",
        "colors": [
            "#2b9c2b",
            "#95db87",
            "#e3ff0f",
            "#bdbcbc",
            "#757674",
            "#0859c4",
            "#fe7e0e",
            "#9467bd",
            "#a07979"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 1030,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "699d17826a82479f",
        "type": "function",
        "z": "d7a5356611a97fea",
        "name": "mainlyClear ",
        "func": "\n\nlet weather_values_mainlyClear = [];\n\nmsg.payload.forEach(row => {\n    // Format the timestamp to \"dd/LL HH:mm\"\n    const timestamp = new Date(`${row.Date}T${row.Time}:00`);\n    const formattedTimestamp = `${('0' + timestamp.getDate()).slice(-2)}/${('0' + (timestamp.getMonth() + 1)).slice(-2)} ${('0' + timestamp.getHours()).slice(-2)}:${('0' + timestamp.getMinutes()).slice(-2)}`;\n\n    // Set value to 2 if \"Mainly clear\", otherwise 0\n    let value;\n    switch (row['Weather_condition']) {\n        case 'Mainly clear': value = 2; break;\n        default: value = 0;\n    }\n\n    weather_values_mainlyClear.push({ x: formattedTimestamp, y: value });\n});\n\nreturn [\n    { topic: \"Mainly clear\", payload: weather_values_mainlyClear }\n];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1220,
        "wires": [
            [
                "d6d535b6d6ad4cfa"
            ]
        ]
    },
    {
        "id": "3fa6e2b40344b9ec",
        "type": "function",
        "z": "d7a5356611a97fea",
        "name": "cloudy",
        "func": "\n\nlet weather_values_cloudy = [];\n\nmsg.payload.forEach(row => {\n    // Format the timestamp to \"dd/LL HH:mm\"\n    const timestamp = new Date(`${row.Date}T${row.Time}:00`);\n    const formattedTimestamp = `${('0' + timestamp.getDate()).slice(-2)}/${('0' + (timestamp.getMonth() + 1)).slice(-2)} ${('0' + timestamp.getHours()).slice(-2)}:${('0' + timestamp.getMinutes()).slice(-2)}`;\n\n    // Set value to 4 if \"Cloudy\", otherwise 0\n    let value;\n    switch (row['Weather_condition']) {\n        case 'Cloudy': value = 4; break;\n        default: value = 0;\n    }\n\n    weather_values_cloudy.push({ x: formattedTimestamp, y: value });\n});\n\nreturn [\n    { topic: \"Cloudy\", payload: weather_values_cloudy }\n];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1340,
        "wires": [
            [
                "d6d535b6d6ad4cfa"
            ]
        ]
    },
    {
        "id": "f0f0f778038fecfb",
        "type": "function",
        "z": "d7a5356611a97fea",
        "name": "partlyCloudy",
        "func": "let weather_values_partlyCloudy = [];\n\nmsg.payload.forEach(row => {\n    // Format the timestamp to \"dd/LL HH:mm\"\n    const timestamp = new Date(`${row.Date}T${row.Time}:00`);\n    const formattedTimestamp = `${('0' + timestamp.getDate()).slice(-2)}/${('0' + (timestamp.getMonth() + 1)).slice(-2)} ${('0' + timestamp.getHours()).slice(-2)}:${('0' + timestamp.getMinutes()).slice(-2)}`;\n\n    // Set value to 3 if \"Partly cloudy\", otherwise 0\n    let value;\n    switch (row['Weather_condition']) {\n        case 'Partly cloudy': value = 3; break;\n        default: value = 0;\n    }\n\n    weather_values_partlyCloudy.push({ x: formattedTimestamp, y: value });\n});\n\nreturn [\n    { topic: \"Partly cloudy\", payload: weather_values_partlyCloudy }\n];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1280,
        "wires": [
            [
                "d6d535b6d6ad4cfa",
                "7a6d08f75216129a"
            ]
        ]
    },
    {
        "id": "9740097335c073b1",
        "type": "function",
        "z": "d7a5356611a97fea",
        "name": "overcast",
        "func": "\nlet weather_values_overcast = [];\n\nmsg.payload.forEach(row => {\n    // Format the timestamp to \"dd/LL HH:mm\"\n    const timestamp = new Date(`${row.Date}T${row.Time}:00`);\n    const formattedTimestamp = `${('0' + timestamp.getDate()).slice(-2)}/${('0' + (timestamp.getMonth() + 1)).slice(-2)} ${('0' + timestamp.getHours()).slice(-2)}:${('0' + timestamp.getMinutes()).slice(-2)}`;\n\n    // Set value to 5 if \"Overcast\", otherwise 0\n    let value;\n    switch (row['Weather_condition']) {\n        case 'Overcast': value = 5; break;\n        default: value = 0;\n    }\n\n    weather_values_overcast.push({ x: formattedTimestamp, y: value });\n});\n\nreturn [\n    { topic: \"Overcast\", payload: weather_values_overcast }\n];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1400,
        "wires": [
            [
                "d6d535b6d6ad4cfa"
            ]
        ]
    },
    {
        "id": "40327b072ad696ce",
        "type": "function",
        "z": "d7a5356611a97fea",
        "name": "rainy",
        "func": "\nlet weather_values_rainy = [];\n\nmsg.payload.forEach(row => {\n    // Format the timestamp to \"dd/LL HH:mm\"\n    const timestamp = new Date(`${row.Date}T${row.Time}:00`);\n    const formattedTimestamp = `${('0' + timestamp.getDate()).slice(-2)}/${('0' + (timestamp.getMonth() + 1)).slice(-2)} ${('0' + timestamp.getHours()).slice(-2)}:${('0' + timestamp.getMinutes()).slice(-2)}`;\n\n    // Set value to 6 if \"Rainy\", otherwise 0\n    let value;\n    switch (row['Weather_condition']) {\n        case 'Rainy': value = 6; break;\n        default: value = 0;\n    }\n\n    weather_values_rainy.push({ x: formattedTimestamp, y: value });\n});\n\nreturn [\n    { topic: \"Rainy\", payload: weather_values_rainy }\n];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1460,
        "wires": [
            [
                "d6d535b6d6ad4cfa"
            ]
        ]
    },
    {
        "id": "47cd3877b32f078d",
        "type": "function",
        "z": "d7a5356611a97fea",
        "name": "Solar Production",
        "func": "let solar = [];\n\nmsg.payload.forEach(row => {\n    // Format the timestamp to \"dd/LL HH:mm\"\n    const timestamp = new Date(`${row.Date}T${row.Time}:00`);\n    const formattedTimestamp = `${('0' + timestamp.getDate()).slice(-2)}/${('0' + (timestamp.getMonth() + 1)).slice(-2)} ${('0' + timestamp.getHours()).slice(-2)}:${('0' + timestamp.getMinutes()).slice(-2)}`;\n\n    // Only process Solar Production Estimate\n    if (row['Solar_Production_Estimate[kW]']) {\n        solar.push({ x: formattedTimestamp, y: row['Solar_Production_Estimate[kW]'] });\n    }\n});\n\n// If no Solar Production data is found, push a default entry with `y: 0`\nif (solar.length === 0) {\n    solar.push({ x: 'No data', y: 0 });\n}\n\n// Return only Solar Production data\nreturn [\n  { topic: \"Solar Production (KW)\", payload: solar }\n];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1040,
        "wires": [
            [
                "d6d535b6d6ad4cfa",
                "a4dae8ade7b55eb7"
            ]
        ]
    },
    {
        "id": "0a672feabad7455c",
        "type": "ui-chart",
        "z": "d7a5356611a97fea",
        "group": "71944814518638a1",
        "name": "Negative prices (EUR/kWh)",
        "label": "Negative prices (EUR/kWh)",
        "order": 2,
        "chartType": "bar",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "x",
        "xAxisPropertyType": "property",
        "xAxisType": "category",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "y",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "0",
        "bins": "",
        "action": "replace",
        "stackSeries": true,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "86400",
        "removeOlderPoints": "",
        "colors": [
            "#2b9c2b",
            "#95db87",
            "#e3ff0f",
            "#bdbcbc",
            "#757674",
            "#0859c4",
            "#fe7e0e",
            "#9467bd",
            "#a07979"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 1240,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "5ea539c240ab9aa0",
        "type": "function",
        "z": "d7a5356611a97fea",
        "name": "Format Chart Data",
        "func": "let consumption = [];\nlet cost = [];\nlet unit_price = [];\n\nmsg.payload.forEach(row => {\n    // Format the timestamp to \"dd/LL HH:mm\"\n    const timestamp = new Date(`${row.Date}T${row.Time}:00`);\n    const formattedTimestamp = `${('0' + timestamp.getDate()).slice(-2)}/${('0' + (timestamp.getMonth() + 1)).slice(-2)} ${('0' + timestamp.getHours()).slice(-2)}:${('0' + timestamp.getMinutes()).slice(-2)}`;\n\n    // Push the relevant data for each series\n    consumption.push({ x: formattedTimestamp, y: Number(row['Consumption[kWh]']) });\n    cost.push({ x: formattedTimestamp, y: Number(row['Consumption_Cost[EUR]']) });\n    unit_price.push({ x: formattedTimestamp, y: Number(row['Consumption_UnitPrice[EUR/kWh]']) });\n});\n\n// Return the new data for each chart input\nreturn [\n    { topic: \"Grid Consumption (kWh)\", payload: consumption },\n    { topic: \"Cost (EUR)\", payload: cost },\n    { topic: \"Unit Price (EUR/kWh)\", payload: unit_price }\n];\n",
        "outputs": 3,
        "timeout": "40",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 200,
        "wires": [
            [
                "649b0de1abfb1d97"
            ],
            [
                "649b0de1abfb1d97"
            ],
            [
                "649b0de1abfb1d97"
            ]
        ]
    },
    {
        "id": "45f4cbf969bab30a",
        "type": "sqlite",
        "z": "d7a5356611a97fea",
        "mydb": "962221d873768ba1",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Query Energy DB",
        "x": 670,
        "y": 200,
        "wires": [
            [
                "5ea539c240ab9aa0",
                "7758151ea81a0c3a",
                "61950fc04b5dfd12"
            ]
        ]
    },
    {
        "id": "8f8a442a4aa08da9",
        "type": "function",
        "z": "d7a5356611a97fea",
        "name": "Build SQL Query",
        "func": "const startDate = new Date(msg.payload.start);\nconst endDate = new Date(msg.payload.end);\n\nif (isNaN(startDate) || isNaN(endDate)) {\n    node.error(\"Invalid date selected.\");\n    return null;\n}\n\n// Set to start and end of the selected days\nstartDate.setHours(0, 0, 0, 0);\nendDate.setHours(23, 59, 59, 999);\n\n// Format for SQLite datetime comparison (ISO: 'YYYY-MM-DDTHH:MM:SS')\nconst startTime = startDate.toISOString().slice(0, 19);\nconst endTime = endDate.toISOString().slice(0, 19);\n\n// Ensure time field is in HH:MM and padded if needed\n// Final format: 'YYYY-MM-DDTHH:MM:SS'\nmsg.topic = `\n    SELECT * FROM data\n    WHERE datetime(Date || 'T' || substr('0' || Time, -5) || ':00')\n    BETWEEN '${startTime}' AND '${endTime}'\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 200,
        "wires": [
            [
                "45f4cbf969bab30a",
                "32500c11f531d540"
            ]
        ]
    },
    {
        "id": "c6950569cf00c5e3",
        "type": "ui-form",
        "z": "d7a5356611a97fea",
        "name": "Date Range",
        "group": "4f854fe43a9cd673",
        "label": "Select Date Range",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Start Date",
                "key": "start",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "End Date",
                "key": "end",
                "type": "date",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "start": "",
            "end": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "clear",
        "resetOnSubmit": false,
        "topic": "",
        "topicType": "str",
        "splitLayout": true,
        "className": "",
        "passthru": false,
        "dropdownOptions": [],
        "x": 130,
        "y": 220,
        "wires": [
            [
                "8f8a442a4aa08da9"
            ]
        ]
    },
    {
        "id": "649b0de1abfb1d97",
        "type": "ui-chart",
        "z": "d7a5356611a97fea",
        "group": "4f854fe43a9cd673",
        "name": "tebbar Api",
        "label": "tebbar Api",
        "order": 5,
        "chartType": "bar",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "x",
        "xAxisPropertyType": "property",
        "xAxisType": "category",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "y",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": "",
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "86400",
        "removeOlderPoints": "",
        "colors": [
            "#498d1c",
            "#f95353",
            "#4c60c2",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "14",
        "height": "8",
        "className": "",
        "interpolation": "linear",
        "x": 1160,
        "y": 40,
        "wires": [
            [
                "3a4d27b730adcc60"
            ]
        ]
    },
    {
        "id": "3a4d27b730adcc60",
        "type": "debug",
        "z": "d7a5356611a97fea",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 220,
        "wires": []
    },
    {
        "id": "32500c11f531d540",
        "type": "function",
        "z": "d7a5356611a97fea",
        "name": "Clear Chart",
        "func": "let consumption = [];\nlet cost = [];\nlet unit_price = [];\n\n\n    return [\n        { topic: \"Consumption\", payload: [] },\n        { topic: \"Cost\", payload: [] },\n        { topic: \"Unit Price\", payload: [] }\n    ];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 120,
        "wires": [
            [
                "649b0de1abfb1d97"
            ]
        ]
    },
    {
        "id": "9ff9ef0c87a3b129",
        "type": "ui-text",
        "z": "d7a5356611a97fea",
        "group": "4f854fe43a9cd673",
        "order": 4,
        "width": 4,
        "height": 1,
        "name": "Total Cost[EUR]",
        "label": "Total Cost",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "",
        "fontSize": "16",
        "color": "#ea1a1a",
        "wrapText": false,
        "className": "",
        "x": 1140,
        "y": 380,
        "wires": []
    },
    {
        "id": "61950fc04b5dfd12",
        "type": "function",
        "z": "d7a5356611a97fea",
        "name": "Total Cost",
        "func": "let total = 0;\nmsg.payload.forEach(row => {\n    total += parseFloat(row[\"Consumption_Cost[EUR]\"]) || 0;\n});\nmsg.payload = total.toFixed(3) + \" EUR\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 380,
        "wires": [
            [
                "9ff9ef0c87a3b129"
            ]
        ]
    },
    {
        "id": "7758151ea81a0c3a",
        "type": "function",
        "z": "d7a5356611a97fea",
        "name": "Total Consumption",
        "func": "let total = 0;\nmsg.payload.forEach(row => {\n    total += parseFloat(row[\"Consumption[kWh]\"]) || 0;\n});\nmsg.payload = total.toFixed(3) + \" kWh\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 300,
        "wires": [
            [
                "e540885bc563cddb"
            ]
        ]
    },
    {
        "id": "e540885bc563cddb",
        "type": "ui-text",
        "z": "d7a5356611a97fea",
        "group": "4f854fe43a9cd673",
        "order": 3,
        "width": 4,
        "height": 1,
        "name": "Total kWh Display",
        "label": "Total Consumption",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "",
        "fontSize": "16",
        "color": "#1339f6",
        "wrapText": false,
        "className": "",
        "x": 1150,
        "y": 320,
        "wires": []
    },
    {
        "id": "8d07bfd7dbea2614",
        "type": "function",
        "z": "d7a5356611a97fea",
        "name": "Build SQL Query",
        "func": "const startDate = new Date(msg.payload.start);\nconst endDate = new Date(msg.payload.end);\n\nif (isNaN(startDate) || isNaN(endDate)) {\n    node.error(\"Invalid date selected.\");\n    return null;\n}\n\n// Set to start and end of the selected days\nstartDate.setHours(0, 0, 0, 0);\nendDate.setHours(23, 59, 59, 999);\n\n// Format for SQLite datetime comparison (ISO: 'YYYY-MM-DDTHH:MM:SS')\nconst startTime = startDate.toISOString().slice(0, 19);\nconst endTime = endDate.toISOString().slice(0, 19);\n\n// Ensure time field is in HH:MM and padded if needed\n// Final format: 'YYYY-MM-DDTHH:MM:SS'\nmsg.topic = `\n    SELECT * FROM consumption\n    WHERE datetime(Date || 'T' || substr('0' || Time, -5) || ':00')\n    BETWEEN '${startTime}' AND '${endTime}'\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 600,
        "wires": [
            [
                "ff778c7c129ef972",
                "8d06ef3159898d45"
            ]
        ]
    },
    {
        "id": "ff778c7c129ef972",
        "type": "sqlite",
        "z": "d7a5356611a97fea",
        "mydb": "6c03dff826846f79",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Query Energy DB",
        "x": 650,
        "y": 600,
        "wires": [
            [
                "8e0b000b1e5bea3b"
            ]
        ]
    },
    {
        "id": "64804418968cf0be",
        "type": "function",
        "z": "d7a5356611a97fea",
        "name": "Grid Prices",
        "func": "let grid_price = [];\n\nmsg.payload.forEach(row => {\n    // Format the timestamp to \"dd/LL HH:mm\"\n    const timestamp = new Date(`${row.Date}T${row.Time}:00`);\n    const formattedTimestamp = `${('0' + timestamp.getDate()).slice(-2)}/${('0' + (timestamp.getMonth() + 1)).slice(-2)} ${('0' + timestamp.getHours()).slice(-2)}:${('0' + timestamp.getMinutes()).slice(-2)}`;\n\n    // Push Grid Price value (or 0 if missing)\n    let value = row['Grid_prices[EUR/kWh]'] || 0;\n    grid_price.push({ x: formattedTimestamp, y: value });\n});\n\n// Return only Grid Price data\nreturn [\n    { topic: \"Grid Price (EUR/kWh)\", payload: grid_price }\n];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 700,
        "wires": [
            [
                "41237f8af40a8498"
            ]
        ]
    },
    {
        "id": "41237f8af40a8498",
        "type": "ui-chart",
        "z": "d7a5356611a97fea",
        "group": "71944814518638a1",
        "name": "Grid Prices (EUR/kWh)",
        "label": "Grid Prices (EUR/kWh)",
        "order": 1,
        "chartType": "bar",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "x",
        "xAxisPropertyType": "property",
        "xAxisType": "category",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "y",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": "",
        "action": "replace",
        "stackSeries": true,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": "0",
        "removeOlderUnit": "86400",
        "removeOlderPoints": "",
        "colors": [
            "#438bea",
            "#95db87",
            "#e3ff0f",
            "#bdbcbc",
            "#757674",
            "#0859c4",
            "#fe7e0e",
            "#9467bd",
            "#a07979"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 1250,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "5a34aa6925d994d3",
        "type": "function",
        "z": "d7a5356611a97fea",
        "name": "Build SQL Query",
        "func": "const now = new Date();\n\n// Format current time to 'YYYY-MM-DD HH:MM:SS'\nconst startTime = now.toISOString().slice(0, 19).replace('T', ' ');\n\n// Generate SQL query for data from now onward\nmsg.topic = `\n    SELECT * FROM data\n    WHERE datetime(Date || ' ' || Time) >= '${startTime}'\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1560,
        "wires": [
            [
                "d572259525f74cc4"
            ]
        ]
    },
    {
        "id": "91beeab8659a998d",
        "type": "inject",
        "z": "d7a5356611a97fea",
        "name": "Inject",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1560,
        "wires": [
            [
                "5a34aa6925d994d3"
            ]
        ]
    },
    {
        "id": "dd3754605be5dfb9",
        "type": "function",
        "z": "d7a5356611a97fea",
        "name": "Format Chart Data",
        "func": "let market_price = [];\n\nmsg.payload.forEach(row => {\n    // Format the timestamp to \"dd/LL HH:mm\"\n    const timestamp = new Date(`${row.Date}T${row.Time}:00`);\n    const formattedTimestamp = `${('0' + timestamp.getDate()).slice(-2)}/${('0' + (timestamp.getMonth() + 1)).slice(-2)} ${('0' + timestamp.getHours()).slice(-2)}:${('0' + timestamp.getMinutes()).slice(-2)}`;\n\n    // Push Market Price value (or 0 if null/missing)\n    let value = row['market_prices[EUR/kWh]'] ?? 0;\n    market_price.push({ x: formattedTimestamp, y: value });\n});\n\n// Return only Market Price data\nreturn [\n    { topic: \"Market Price (EUR/kWh)\", payload: market_price }\n];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1580,
        "wires": [
            [
                "a4592b9516483db1",
                "8d2a455eea3b59ef"
            ]
        ]
    },
    {
        "id": "a4592b9516483db1",
        "type": "debug",
        "z": "d7a5356611a97fea",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 1580,
        "wires": []
    },
    {
        "id": "8d2a455eea3b59ef",
        "type": "ui-chart",
        "z": "d7a5356611a97fea",
        "group": "63e1c09fac0e4fb2",
        "name": "Unit Price Forecast (EUR/kWh)",
        "label": "Unit Price Forecast (EUR/kWh)",
        "order": 2,
        "chartType": "bar",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "x",
        "xAxisPropertyType": "property",
        "xAxisType": "category",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "y",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "0.5",
        "bins": "",
        "action": "replace",
        "stackSeries": true,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": "0",
        "removeOlderUnit": "86400",
        "removeOlderPoints": "",
        "colors": [
            "#26d6ed",
            "#95db87",
            "#e3ff0f",
            "#bdbcbc",
            "#757674",
            "#0859c4",
            "#fe7e0e",
            "#9467bd",
            "#a07979"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 1170,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "d572259525f74cc4",
        "type": "sqlite",
        "z": "d7a5356611a97fea",
        "mydb": "962221d873768ba1",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Query Energy DB",
        "x": 630,
        "y": 1560,
        "wires": [
            [
                "dd3754605be5dfb9"
            ]
        ]
    },
    {
        "id": "8e0b000b1e5bea3b",
        "type": "function",
        "z": "d7a5356611a97fea",
        "name": "Total Consumption [Meter] (kWh)",
        "func": "let a_total = [];\nlet b_total = [];\nlet c_total = [];\nlet total = [];\n\nmsg.payload.forEach(row => {\n    // Format the timestamp to \"dd/LL HH:mm\"\n    const timestamp = new Date(row[\"Date_Time\"]);\n    const formattedTimestamp = `${('0' + timestamp.getDate()).slice(-2)}/${('0' + (timestamp.getMonth() + 1)).slice(-2)} ${('0' + timestamp.getHours()).slice(-2)}:${('0' + timestamp.getMinutes()).slice(-2)}`;\n\n    // Push each parameter into its respective array\n    a_total.push({ x: formattedTimestamp, y: Number(row['a_total_act_energy']) });\n    b_total.push({ x: formattedTimestamp, y: Number(row['b_total_act_energy']) });\n    c_total.push({ x: formattedTimestamp, y: Number(row['c_total_act_energy']) });\n    total.push({ x: formattedTimestamp, y: Number(row['total_act']) });\n});\n\n// Return the new data for each chart input\nreturn [\n    { topic: \"Phase A Energy (kWh)\", payload: a_total },\n    { topic: \"Phase B Energy (kWh)\", payload: b_total },\n    { topic: \"Phase C Energy (kWh)\", payload: c_total },\n    { topic: \"Total Energy (kWh)\", payload: total }\n];\n\n\n\n",
        "outputs": 4,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 600,
        "wires": [
            [
                "91d5b83efd7398e4"
            ],
            [
                "91d5b83efd7398e4"
            ],
            [
                "91d5b83efd7398e4"
            ],
            [
                "91d5b83efd7398e4"
            ]
        ]
    },
    {
        "id": "91d5b83efd7398e4",
        "type": "ui-chart",
        "z": "d7a5356611a97fea",
        "group": "63e1c09fac0e4fb2",
        "name": "Total Consumption (kWh)",
        "label": "Total Consumption [Meter] (kWh)",
        "order": 1,
        "chartType": "bar",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "x",
        "xAxisPropertyType": "property",
        "xAxisType": "category",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "y",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": "",
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "86400",
        "removeOlderPoints": "",
        "colors": [
            "#c5b0d5",
            "#f95353",
            "#4c60c2",
            "#488b1c",
            "#98df8a",
            "#498d1c",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 1270,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "8d06ef3159898d45",
        "type": "function",
        "z": "d7a5356611a97fea",
        "name": "Clear Chart",
        "func": "let a_total = [];\nlet b_total = [];\nlet c_total = [];\nlet total = [];\n\n\n    return [\n        { topic: \"a_total\", payload: [] },\n        { topic: \"b_total\", payload: [] },\n        { topic: \"c_total\", payload: [] },\n        { topic: \"total\", payload: [] }\n    ];\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 520,
        "wires": [
            [
                "91d5b83efd7398e4"
            ]
        ]
    },
    {
        "id": "1804968ffb62b2db",
        "type": "ui-form",
        "z": "d7a5356611a97fea",
        "name": "Date Range",
        "group": "5feffaf0e3a5c955",
        "label": "Select Date Range",
        "order": 1,
        "width": "15",
        "height": "2",
        "options": [
            {
                "label": "Start Date",
                "key": "start",
                "type": "date",
                "required": true,
                "rows": null
            },
            {
                "label": "End Date",
                "key": "end",
                "type": "date",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "start": "",
            "end": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "clear",
        "resetOnSubmit": false,
        "topic": "",
        "topicType": "str",
        "splitLayout": true,
        "className": "",
        "passthru": false,
        "dropdownOptions": [],
        "x": 130,
        "y": 600,
        "wires": [
            [
                "4ab103c31681b0bd",
                "8d07bfd7dbea2614"
            ]
        ]
    },
    {
        "id": "7cf11420e93c4f8a",
        "type": "sqlite",
        "z": "d7a5356611a97fea",
        "mydb": "962221d873768ba1",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Query Energy DB",
        "x": 530,
        "y": 740,
        "wires": [
            [
                "64804418968cf0be",
                "3e45f54e8c3d0a7d"
            ]
        ]
    },
    {
        "id": "4ab103c31681b0bd",
        "type": "function",
        "z": "d7a5356611a97fea",
        "name": "Build SQL Query",
        "func": "const startDate = new Date(msg.payload.start);\nconst endDate = new Date(msg.payload.end);\n\nif (isNaN(startDate) || isNaN(endDate)) {\n    node.error(\"Invalid date selected.\");\n    return null;\n}\n\n// Set to start and end of the selected days\nstartDate.setHours(0, 0, 0, 0);\nendDate.setHours(23, 59, 59, 999);\n\n// Format for SQLite datetime comparison (ISO: 'YYYY-MM-DDTHH:MM:SS')\nconst startTime = startDate.toISOString().slice(0, 19);\nconst endTime = endDate.toISOString().slice(0, 19);\n\n// Ensure time field is in HH:MM and padded if needed\n// Final format: 'YYYY-MM-DDTHH:MM:SS'\nmsg.topic = `\n    SELECT * FROM data\n    WHERE datetime(Date || 'T' || substr('0' || Time, -5) || ':00')\n    BETWEEN '${startTime}' AND '${endTime}'\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 740,
        "wires": [
            [
                "7cf11420e93c4f8a"
            ]
        ]
    },
    {
        "id": "d1f1034ab0d91203",
        "type": "ui_chart",
        "z": "8894e458c60c45f5",
        "name": "Planned Energy Source (48h)",
        "group": "group1",
        "order": 8,
        "width": "12",
        "height": "5",
        "label": "Planned Energy Source (Next 48h)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "step-after",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 48,
        "removeOlderUnit": "hour",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#003f5c",
            "#ffa600",
            "#2f4b7c",
            "#00bfae"
        ],
        "outputs": 1,
        "x": 1960,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "8e268417d4597a88",
        "type": "ui_chart",
        "z": "8894e458c60c45f5",
        "name": "Executed Energy Source (48h)",
        "group": "group1",
        "order": 9,
        "width": "12",
        "height": "5",
        "label": "Executed Energy Source (From Tibber)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "step-after",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 48,
        "removeOlderUnit": "hour",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#a05195",
            "#ff7c43",
            "#d45087",
            "#665191"
        ],
        "outputs": 1,
        "x": 1960,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "55b1b5af53680a49",
        "type": "inject",
        "z": "8894e458c60c45f5",
        "name": "Trigger (Every 48h at 13:05)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "5 13 */2 * *",
        "once": false,
        "onceDelay": 0.1,
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 160,
        "wires": [
            [
                "2d31c025626216b7"
            ]
        ]
    },
    {
        "id": "2d31c025626216b7",
        "type": "sqlite",
        "z": "8894e458c60c45f5",
        "mydb": "962221d873768ba1",
        "sqlquery": "fixed",
        "sql": "\nSELECT \n  Date,\n  Time,\n  \"Consumption_UnitPriceVAT[EUR/kWh]\" AS price_no_tax,\n  \"solar_Production_Estimate[kW]\" AS solar_production,\n  \"Consumption[kWh]\" AS solar_consumption\nFROM data\nWHERE Date = date('now') OR Date = date('now', '+1 day')\n",
        "name": "Fetch Energy Data (Today + Tomorrow)",
        "x": 660,
        "y": 160,
        "wires": [
            [
                "067eb77a3f80dddd",
                "bec2c04de08b7999",
                "67efda5c833a0317",
                "correct_plan_node"
            ]
        ]
    },
    {
        "id": "067eb77a3f80dddd",
        "type": "debug",
        "z": "8894e458c60c45f5",
        "name": "Fetched 48h Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 120,
        "wires": []
    },
    {
        "id": "bec2c04de08b7999",
        "type": "function",
        "z": "8894e458c60c45f5",
        "name": "Check Solar > Consumption",
        "func": "\nlet now = new Date();\nlet match = msg.payload.find(row => {\n    let t = new Date(row.Date + 'T' + row.Time + ':00');\n    return t <= now && now < new Date(t.getTime() + 15 * 60000);\n});\nif (match && match.solar_production > match.solar_consumption) {\n    msg.payload = \"Surplus: Charging grid.\";\n} else {\n    msg.payload = \"\";\n}\nreturn msg;\n",
        "outputs": 1,
        "x": 1260,
        "y": 160,
        "wires": [
            [
                "fd993bf8ca34c9ee"
            ]
        ]
    },
    {
        "id": "fd993bf8ca34c9ee",
        "type": "ui_text",
        "z": "8894e458c60c45f5",
        "group": "group1",
        "order": 6,
        "name": "Surplus Solar",
        "label": "Solar Status",
        "format": "{{msg.payload}}",
        "x": 1500,
        "y": 160,
        "wires": []
    },
    {
        "id": "67efda5c833a0317",
        "type": "function",
        "z": "8894e458c60c45f5",
        "name": "Decide Source + Control Shelly",
        "func": "\nlet now = new Date();\nlet current = msg.payload.find(r => {\n    let t = new Date(r.Date + 'T' + r.Time + ':00');\n    return t <= now && now < new Date(t.getTime() + 15 * 60000);\n});\n\nif (!current) return null;\nlet price = current.price_no_tax;\nlet avg = msg.averagePrice;\nlet shellyMsg = {};\n\nif (price < 0 || price < avg * 0.8) {\n    shellyMsg.payload = { turn: \"on\" }; // charging\n} else if (price > avg * 1.2) {\n    shellyMsg.payload = { turn: \"off\" }; // discharging\n} else {\n    shellyMsg.payload = { turn: \"on\" };\n}\n\nshellyMsg.url = \"http://192.168.2.102/relay/0\";\nreturn shellyMsg;\n",
        "outputs": 1,
        "x": 1310,
        "y": 240,
        "wires": [
            [
                "7cca65c9e5dd195a"
            ]
        ]
    },
    {
        "id": "7cca65c9e5dd195a",
        "type": "http request",
        "z": "8894e458c60c45f5",
        "name": "Send to Shelly Switch",
        "method": "POST",
        "url": "",
        "x": 1610,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "a04da5f21b461eb0",
        "type": "ui_chart",
        "z": "8894e458c60c45f5",
        "name": "Planned Energy Source (48h)",
        "group": "group1",
        "order": 8,
        "width": "12",
        "height": "5",
        "label": "Planned Energy Source (Next 48h)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "step-after",
        "nodata": "",
        "dot": false,
        "ymin": "-1",
        "ymax": "1",
        "removeOlder": 48,
        "removeOlderPoints": "",
        "removeOlderUnit": "hour",
        "cutout": "",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#003f5c",
            "#ffa600",
            "#2f4b7c",
            "#00bfae",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1660,
        "y": 360,
        "wires": [
            [
                "8a8b376f2398bf59"
            ]
        ]
    },
    {
        "id": "194c68c46a92bc5b",
        "type": "ui_chart",
        "z": "8894e458c60c45f5",
        "name": "Executed Energy Source (48h)",
        "group": "group1",
        "order": 9,
        "width": "12",
        "height": "5",
        "label": "Executed Energy Source (From Tibber)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "step-after",
        "nodata": "payload",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 48,
        "removeOlderPoints": "",
        "removeOlderUnit": "hour",
        "cutout": "",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#a05195",
            "#ff7c43",
            "#d45087",
            "#665191",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1660,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "7f5828805647dc38",
        "type": "ui_chart",
        "z": "8894e458c60c45f5",
        "name": "Battery Level (48h)",
        "group": "group1",
        "order": 8,
        "width": "12",
        "height": "5",
        "label": "Battery Level (kWh)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "step-after",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 48,
        "removeOlderUnit": "hour",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#003f5c",
            "#ffa600",
            "#2f4b7c",
            "#00bfae"
        ],
        "outputs": 1,
        "x": 820,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "692e2920a0c1baad",
        "type": "ui_chart",
        "z": "8894e458c60c45f5",
        "name": "Shelly Switch State (48h)",
        "group": "group1",
        "order": 8,
        "width": "12",
        "height": "5",
        "label": "Switch State",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "step-after",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 48,
        "removeOlderUnit": "hour",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#003f5c",
            "#ffa600",
            "#2f4b7c",
            "#00bfae"
        ],
        "outputs": 1,
        "x": 820,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "0485ec35757230a3",
        "type": "ui_chart",
        "z": "8894e458c60c45f5",
        "name": "Planned Energy Source (Next 48h)",
        "group": "group1",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Planned Energy Source (Next 48h)",
        "chartType": "line",
        "legend": "true",
        "xformat": "auto",
        "interpolate": "linear",
        "nodata": "No data yet",
        "dot": false,
        "ymin": "-1",
        "ymax": "1",
        "removeOlder": "48",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#ff7f0e",
            "#2ca02c",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1300,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "8a8b376f2398bf59",
        "type": "debug",
        "z": "8894e458c60c45f5",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 160,
        "wires": []
    },
    {
        "id": "correct_plan_node",
        "type": "function",
        "z": "8894e458c60c45f5",
        "name": "Generate Corrected Energy Plans (48h)",
        "func": "let labels = [];\nlet planned = [];\nlet executed = [];\n\nlet battery = 2.5;\nconst capacity = 5.0;\nconst chargeRate = 5.0;\nconst dischargeRate = 5.0 / 3;\nconst lookAhead = 2;\n\nlet now = new Date();\nlet month = now.getMonth() + 1;\nlet season = (month <= 2 || month === 12) ? \"winter\" : (month <= 5) ? \"spring\" : (month <= 8) ? \"summer\" : \"autumn\";\n\nfunction simulateLoad(hour, season) {\n    if (season === 'winter') {\n        if (hour >= 6 && hour < 9) return 0.25 + 0.35 * Math.sin((hour - 6)/3 * Math.PI);\n        if (hour >= 16 && hour < 20) return 0.6 + 0.5 * Math.sin((hour - 16)/4 * Math.PI);\n        return 0.4;\n    }\n    if (season === 'summer') {\n        if (hour >= 12 && hour < 16) return 0.8 + 1.2 * Math.sin((hour - 12)/4 * Math.PI);\n        return 0.4;\n    }\n    if (season === 'spring' || season === 'autumn') {\n        if (hour >= 7 && hour < 10) return 0.4 + 0.4 * Math.sin((hour - 7)/3 * Math.PI);\n        if (hour >= 17 && hour < 21) return 0.6 + 0.6 * Math.sin((hour - 17)/4 * Math.PI);\n        return 0.35;\n    }\n    return 0.4;\n}\n\nlet data = msg.payload;\nlet avg = msg.averagePrice || 0.2;\n\ndata.forEach((row, idx, arr) => {\n    let label = row.Date + \" \" + row.Time;\n    labels.push(label);\n\n    let price = parseFloat(row.price_no_tax) || 0;\n    let solar = parseFloat(row.solar_production) || 0;\n    let usage = simulateLoad(parseInt(row.Time.split(\":\")[0]), season);\n\n    let action = 0;\n    let executedAction = 0;\n\n    if ((price < 0.03 || solar > usage) && battery < capacity) {\n        battery += Math.min(chargeRate, capacity - battery);\n        action = 1;\n    } else if (price > avg * 1.2 && battery > 0) {\n        battery -= Math.min(dischargeRate, battery);\n        action = -1;\n    } else {\n        action = 0;\n    }\n\n    battery = Math.max(0, Math.min(battery, capacity));\n    executedAction = (solar > usage) ? 1 : (price > avg * 1.2 ? -1 : 0);\n\n    planned.push(action);\n    executed.push(executedAction);\n});\n\nlet preplanMsg = {\n    payload: [{\n        series: [\"Planned\"],\n        data: [planned],\n        labels: labels\n    }]\n};\n\nlet executionMsg = {\n    payload: [{\n        series: [\"Executed\"],\n        data: [executed],\n        labels: labels\n    }]\n};\n\nreturn [preplanMsg, executionMsg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 300,
        "wires": [
            [],
            [
                "a04da5f21b461eb0",
                "194c68c46a92bc5b"
            ]
        ]
    },
    {
        "id": "72bb320e40b82af3",
        "type": "ui_chart",
        "z": "b4be30ee36010a80",
        "name": "Planned Energy Source (48h)",
        "group": "group1",
        "order": 8,
        "width": "12",
        "height": "5",
        "label": "Planned Energy Source (Next 48h)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "step-after",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 48,
        "removeOlderUnit": "hour",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#003f5c",
            "#ffa600",
            "#2f4b7c",
            "#00bfae"
        ],
        "outputs": 1,
        "x": 1960,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "611c223ecbc0a0be",
        "type": "ui_chart",
        "z": "b4be30ee36010a80",
        "name": "Executed Energy Source (48h)",
        "group": "group1",
        "order": 9,
        "width": "12",
        "height": "5",
        "label": "Executed Energy Source (From Tibber)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "step-after",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 48,
        "removeOlderUnit": "hour",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#a05195",
            "#ff7c43",
            "#d45087",
            "#665191"
        ],
        "outputs": 1,
        "x": 1960,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "d075a68fbbde6784",
        "type": "inject",
        "z": "b4be30ee36010a80",
        "name": "Trigger (Every 48h at 13:05)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "05 13 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 140,
        "wires": [
            [
                "2039a2400b44998f",
                "30764ee9b6b2de99"
            ]
        ]
    },
    {
        "id": "2039a2400b44998f",
        "type": "sqlite",
        "z": "b4be30ee36010a80",
        "mydb": "962221d873768ba1",
        "sqlquery": "fixed",
        "sql": "\nSELECT \n  Date,\n  Time,\n  \"market_prices[EUR/kWh]\",\n  \"solar_Production_Estimate[kW]\",\n  \"Consumption[kWh]\",\n  \"Negative_prices[EUR/kWh]\",\n  \"Grid_prices[EUR/kWh]\"\nFROM data\nWHERE Date = date('now') OR Date = date('now', '+1 day')\n",
        "name": "Fetch Energy Data (Today + Tomorrow)",
        "x": 500,
        "y": 140,
        "wires": [
            [
                "86405fa2a4ce0afd",
                "97b3af0cd098c166",
                "70f966101dd1cb2f",
                "20d677d574d25c93",
                "generate_energy_plan"
            ]
        ]
    },
    {
        "id": "86405fa2a4ce0afd",
        "type": "debug",
        "z": "b4be30ee36010a80",
        "name": "Fetched 48h Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 120,
        "wires": []
    },
    {
        "id": "97b3af0cd098c166",
        "type": "function",
        "z": "b4be30ee36010a80",
        "name": "Check Solar > Consumption",
        "func": "\nlet now = new Date();\nlet match = msg.payload.find(row => {\n    let t = new Date(row.Date + 'T' + row.Time + ':00');\n    return t <= now && now < new Date(t.getTime() + 15 * 60000);\n});\nif (match && match.solar_production > match.solar_consumption) {\n    msg.payload = \"Surplus: Charging grid.\";\n} else {\n    msg.payload = \"\";\n}\nreturn msg;\n",
        "outputs": 1,
        "x": 1260,
        "y": 160,
        "wires": [
            [
                "4c90e4a83c74f4f2"
            ]
        ]
    },
    {
        "id": "4c90e4a83c74f4f2",
        "type": "ui_text",
        "z": "b4be30ee36010a80",
        "group": "group1",
        "order": 6,
        "name": "Surplus Solar",
        "label": "Solar Status",
        "format": "{{msg.payload}}",
        "x": 1500,
        "y": 160,
        "wires": []
    },
    {
        "id": "70f966101dd1cb2f",
        "type": "function",
        "z": "b4be30ee36010a80",
        "name": "Decide Source + Control Shelly",
        "func": "\nlet now = new Date();\nlet current = msg.payload.find(r => {\n    let t = new Date(r.Date + 'T' + r.Time + ':00');\n    return t <= now && now < new Date(t.getTime() + 15 * 60000);\n});\n\nif (!current) return null;\nlet price = current.price_no_tax;\nlet avg = msg.averagePrice;\nlet shellyMsg = {};\n\nif (price < 0 || price < avg * 0.8) {\n    shellyMsg.payload = { turn: \"on\" }; // charging\n} else if (price > avg * 1.2) {\n    shellyMsg.payload = { turn: \"off\" }; // discharging\n} else {\n    shellyMsg.payload = { turn: \"on\" };\n}\n\nshellyMsg.url = \"http://192.168.2.102/relay/0\";\nreturn shellyMsg;\n",
        "outputs": 1,
        "x": 1310,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "01836d431c818cb8",
        "type": "ui_chart",
        "z": "b4be30ee36010a80",
        "name": "Planned Energy Source (48h)",
        "group": "group1",
        "order": 8,
        "width": "12",
        "height": "5",
        "label": "Planned Energy Source (Next 48h)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "step-after",
        "nodata": "",
        "dot": false,
        "ymin": "-1",
        "ymax": "1",
        "removeOlder": 48,
        "removeOlderPoints": "",
        "removeOlderUnit": "hour",
        "cutout": "",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#003f5c",
            "#ffa600",
            "#2f4b7c",
            "#00bfae",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1350,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "cb76ad175673c1fb",
        "type": "ui_chart",
        "z": "b4be30ee36010a80",
        "name": "Executed Energy Source (48h)",
        "group": "group1",
        "order": 9,
        "width": "12",
        "height": "5",
        "label": "Executed Energy Source (From Tibber)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "step-after",
        "nodata": "payload",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 48,
        "removeOlderPoints": "",
        "removeOlderUnit": "hour",
        "cutout": "",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#a05195",
            "#ff7c43",
            "#d45087",
            "#665191",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1330,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "341e8a027694270f",
        "type": "ui_chart",
        "z": "b4be30ee36010a80",
        "name": "Battery Level (48h)",
        "group": "group1",
        "order": 8,
        "width": "12",
        "height": "5",
        "label": "Battery Level (kWh)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "step-after",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 48,
        "removeOlderUnit": "hour",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#003f5c",
            "#ffa600",
            "#2f4b7c",
            "#00bfae"
        ],
        "outputs": 1,
        "x": 1250,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "2232fbc6f762ec91",
        "type": "ui_chart",
        "z": "b4be30ee36010a80",
        "name": "Shelly Switch State (48h)",
        "group": "group1",
        "order": 8,
        "width": "12",
        "height": "5",
        "label": "Switch State",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "step-after",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 48,
        "removeOlderUnit": "hour",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#003f5c",
            "#ffa600",
            "#2f4b7c",
            "#00bfae"
        ],
        "outputs": 1,
        "x": 1090,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "3e57301d34017593",
        "type": "debug",
        "z": "b4be30ee36010a80",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 280,
        "wires": []
    },
    {
        "id": "20d677d574d25c93",
        "type": "function",
        "z": "b4be30ee36010a80",
        "name": "Generate Corrected Energy Plans (48h)",
        "func": "let labels = [];\nlet planned = [];\nlet executed = [];\n\nlet battery = 2.5;\nconst capacity = 5.0;\nconst chargeRate = 5.0;\nconst dischargeRate = 5.0 / 3;\nconst lookAhead = 2;\n\nlet now = new Date();\nlet month = now.getMonth() + 1;\nlet season = (month <= 2 || month === 12) ? \"winter\" : (month <= 5) ? \"spring\" : (month <= 8) ? \"summer\" : \"autumn\";\n\nfunction simulateLoad(hour, season) {\n    if (season === 'winter') {\n        if (hour >= 6 && hour < 9) return 0.25 + 0.35 * Math.sin((hour - 6)/3 * Math.PI);\n        if (hour >= 16 && hour < 20) return 0.6 + 0.5 * Math.sin((hour - 16)/4 * Math.PI);\n        return 0.4;\n    }\n    if (season === 'summer') {\n        if (hour >= 12 && hour < 16) return 0.8 + 1.2 * Math.sin((hour - 12)/4 * Math.PI);\n        return 0.4;\n    }\n    if (season === 'spring' || season === 'autumn') {\n        if (hour >= 7 && hour < 10) return 0.4 + 0.4 * Math.sin((hour - 7)/3 * Math.PI);\n        if (hour >= 17 && hour < 21) return 0.6 + 0.6 * Math.sin((hour - 17)/4 * Math.PI);\n        return 0.35;\n    }\n    return 0.4;\n}\n\nlet data = msg.payload;\nlet avg = msg.averagePrice || 0.2;\n\ndata.forEach((row, idx, arr) => {\n    let label = row.Date + \" \" + row.Time;\n    labels.push(label);\n\n    let price = parseFloat(row.price_no_tax) || 0;\n    let solar = parseFloat(row.solar_production) || 0;\n    let usage = simulateLoad(parseInt(row.Time.split(\":\")[0]), season);\n\n    let action = 0;\n    let executedAction = 0;\n\n    if ((price < 0.03 || solar > usage) && battery < capacity) {\n        battery += Math.min(chargeRate, capacity - battery);\n        action = 1;\n    } else if (price > avg * 1.2 && battery > 0) {\n        battery -= Math.min(dischargeRate, battery);\n        action = -1;\n    } else {\n        action = 0;\n    }\n\n    battery = Math.max(0, Math.min(battery, capacity));\n    executedAction = (solar > usage) ? 1 : (price > avg * 1.2 ? -1 : 0);\n\n    planned.push(action);\n    executed.push(executedAction);\n});\n\nlet preplanMsg = {\n    payload: [{\n        series: [\"Planned\"],\n        data: [planned],\n        labels: labels\n    }]\n};\n\nlet executionMsg = {\n    payload: [{\n        series: [\"Executed\"],\n        data: [executed],\n        labels: labels\n    }]\n};\n\nreturn [preplanMsg, executionMsg];\n\nlet batterySeries = [];\nlet switchSeries = [];\n\nbattery = 2.5;\ndata.forEach((row, idx) => {\n    let label = row.Date + \" \" + row.Time;\n\n    let price = parseFloat(row.price_no_tax) || 0;\n    let solar = parseFloat(row.solar_production) || 0;\n    let usage = simulateLoad(parseInt(row.Time.split(\":\")[0]), season);\n\n    let action = 0;\n    let switchState = 0;\n\n    if ((price < 0.03 || solar > usage) && battery < capacity) {\n        battery += Math.min(chargeRate, capacity - battery);\n        action = 1;\n        switchState = 1;\n    } else if (price > avg * 1.2 && battery > 0) {\n        battery -= Math.min(dischargeRate, battery);\n        action = -1;\n        switchState = 0;\n    } else {\n        action = 0;\n        switchState = 0;\n    }\n\n    battery = Math.max(0, Math.min(battery, capacity));\n\n    batterySeries.push({ x: label, y: Number(battery.toFixed(2)) });\n    switchSeries.push({ x: label, y: switchState });\n});\n\nlet batteryMsg = { topic: \"Battery Level (kWh)\", payload: batterySeries };\nlet switchMsg = { topic: \"Shelly Switch State\", payload: switchSeries };\n\nreturn [preplanMsg, executionMsg, batteryMsg, switchMsg];\n",
        "outputs": 4,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 300,
        "wires": [
            [],
            [
                "3e57301d34017593"
            ],
            [
                "341e8a027694270f"
            ],
            []
        ]
    },
    {
        "id": "generate_energy_plan",
        "type": "function",
        "z": "b4be30ee36010a80",
        "name": "Generate Energy Plan (Today + Tomorrow)",
        "func": "\n// Node-RED Function Node: Generate Energy Plans (Today + Tomorrow)\n\n// Input: msg.payload (array of energy forecast data)\n// Input: msg.battery_soc (current SoC percentage from API)\n\nlet labels = [];\nlet planned = [];\nlet executed = [];\nlet battery_series = [];\nlet switch_series = [];\n\nlet battery = (msg.battery_soc || 50) / 100 * 5.0; // Default 50% if missing, 5 kWh capacity\nconst capacity = 5.0;\nconst chargeRate = 5.0;\nconst dischargeRate = 5.0 / 3;\n\nlet now = new Date();\nlet month = now.getMonth() + 1;\nlet season = (month <= 2 || month === 12) ? \"winter\" : (month <= 5) ? \"spring\" : (month <= 8) ? \"summer\" : \"autumn\";\n\nfunction simulateLoad(hour, season) {\n    if (season === 'winter') {\n        if (hour >= 6 && hour < 9) return 0.25 + 0.35 * Math.sin((hour - 6)/3 * Math.PI);\n        if (hour >= 16 && hour < 20) return 0.6 + 0.5 * Math.sin((hour - 16)/4 * Math.PI);\n        return 0.4;\n    }\n    if (season === 'summer') {\n        if (hour >= 12 && hour < 16) return 0.8 + 1.2 * Math.sin((hour - 12)/4 * Math.PI);\n        return 0.4;\n    }\n    if (season === 'spring' || season === 'autumn') {\n        if (hour >= 7 && hour < 10) return 0.4 + 0.4 * Math.sin((hour - 7)/3 * Math.PI);\n        if (hour >= 17 && hour < 21) return 0.6 + 0.6 * Math.sin((hour - 17)/4 * Math.PI);\n        return 0.35;\n    }\n    return 0.4;\n}\n\nconst avgPrice = msg.payload.reduce((sum, row) => sum + parseFloat(row.market_price || 0), 0) / msg.payload.length;\n\nmsg.payload.forEach(row => {\n    const label = `${row.Date} ${row.Time}`;\n    const hour = parseInt(row.Time.split(\":\")[0]);\n    const solar = parseFloat(row.solar_production) || 0;\n    const price = parseFloat(row.market_price) || 0;\n    const usage = simulateLoad(hour, season);\n\n    let action = 0;\n    let exec = 0;\n    let switchState = 0;\n\n    if ((solar > usage || price < 0.03) && battery < capacity) {\n        battery += Math.min(chargeRate, capacity - battery);\n        action = 1;\n        switchState = 1;\n    } else if (price > avgPrice * 1.2 && battery > 0) {\n        battery -= Math.min(dischargeRate, battery);\n        action = -1;\n        switchState = 0;\n    } else {\n        action = 0;\n        switchState = 0;\n    }\n\n    battery = Math.max(0, Math.min(capacity, battery));\n    exec = (solar > usage) ? 1 : (price > avgPrice * 1.2 ? -1 : 0);\n\n    labels.push(label);\n    planned.push(action);\n    executed.push(exec);\n    battery_series.push({ x: label, y: parseFloat(battery.toFixed(2)) });\n    switch_series.push({ x: label, y: switchState });\n});\n\nreturn [\n    { topic: \"Planned Action\", payload: [{ series: [\"Planned\"], data: [planned], labels }] },\n    { topic: \"Executed Action\", payload: [{ series: [\"Executed\"], data: [executed], labels }] },\n    { topic: \"Battery Level (kWh)\", payload: battery_series },\n    { topic: \"Switch State\", payload: switch_series }\n];\n",
        "outputs": 4,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 420,
        "wires": [
            [
                "d321e190e5484dcd"
            ],
            [
                "d321e190e5484dcd"
            ],
            [
                "d321e190e5484dcd"
            ],
            [
                "d321e190e5484dcd"
            ]
        ]
    },
    {
        "id": "d321e190e5484dcd",
        "type": "debug",
        "z": "b4be30ee36010a80",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 400,
        "wires": []
    },
    {
        "id": "inject_battery_soc",
        "type": "inject",
        "z": "b4be30ee36010a80",
        "name": "Set Battery SoC",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 340,
        "wires": [
            [
                "change_battery_soc"
            ]
        ]
    },
    {
        "id": "change_battery_soc",
        "type": "change",
        "z": "b4be30ee36010a80",
        "name": "Battery SoC = 80%",
        "rules": [
            {
                "t": "set",
                "p": "battery_soc",
                "pt": "msg",
                "to": "80",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 440,
        "wires": [
            [
                "generate_energy_plan"
            ]
        ]
    },
    {
        "id": "47d12f205e8caa01",
        "type": "debug",
        "z": "b4be30ee36010a80",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 120,
        "wires": []
    },
    {
        "id": "30764ee9b6b2de99",
        "type": "exec",
        "z": "b4be30ee36010a80",
        "command": "python3 -u /home/pi/.node-red/projects/Project/scripts/battery.py",
        "addpay": "topic",
        "append": "3",
        "useSpawn": "true",
        "name": "battery_status",
        "x": 440,
        "y": 60,
        "wires": [
            [
                "22172cb79bd05818"
            ],
            [],
            []
        ]
    },
    {
        "id": "22172cb79bd05818",
        "type": "function",
        "z": "b4be30ee36010a80",
        "name": "Extract SoC",
        "func": "try {\n    msg.battery_soc = parseFloat(msg.payload.SoC || msg.payload.soc || msg.payload) || 50;\n} catch (e) {\n    msg.battery_soc = 50; // default fallback\n}\nreturn msg;",
        "outputs": 1,
        "x": 610,
        "y": 60,
        "wires": [
            [
                "49930623cbec3592"
            ]
        ]
    },
    {
        "id": "49930623cbec3592",
        "type": "sqlite",
        "z": "b4be30ee36010a80",
        "mydb": "d92d5b5a4b3371e2",
        "sqlquery": "fixed",
        "sql": "SELECT Date, Time, \"market_prices[EUR/kWh]\" AS market_price, \"solar_Production_Estimate[kW]\" AS solar_production, \"Consumption[kWh]\" AS consumption FROM data WHERE Date = date('now') OR Date = date('now', '+1 day')",
        "name": "Fetch 48h Energy Data",
        "x": 890,
        "y": 40,
        "wires": [
            [
                "c80dd74291a7a157"
            ]
        ]
    },
    {
        "id": "c80dd74291a7a157",
        "type": "function",
        "z": "b4be30ee36010a80",
        "name": "Generate Energy Plan (Today + Tomorrow)",
        "func": "\nif (!Array.isArray(msg.payload)) {\n    if (Array.isArray(msg.payload.payload)) {\n        msg.payload = msg.payload.payload;\n    } else {\n        node.error(\"msg.payload is not an array\", msg);\n        return null;\n    }\n}\n\nlet labels = [], planned = [], executed = [], battery_series = [], switch_series = [];\n\nlet battery = (msg.battery_soc || 50) / 100 * 5.0;\nconst capacity = 5.0, chargeRate = 5.0, dischargeRate = 5.0 / 3;\n\nlet now = new Date(), month = now.getMonth() + 1;\nlet season = (month <= 2 || month === 12) ? \"winter\" : (month <= 5) ? \"spring\" : (month <= 8) ? \"summer\" : \"autumn\";\n\nfunction simulateLoad(hour, season) {\n    if (season === 'winter') {\n        if (hour >= 6 && hour < 9) return 0.25 + 0.35 * Math.sin((hour - 6)/3 * Math.PI);\n        if (hour >= 16 && hour < 20) return 0.6 + 0.5 * Math.sin((hour - 16)/4 * Math.PI);\n        return 0.4;\n    }\n    if (season === 'summer') {\n        if (hour >= 12 && hour < 16) return 0.8 + 1.2 * Math.sin((hour - 12)/4 * Math.PI);\n        return 0.4;\n    }\n    if (season === 'spring' || season === 'autumn') {\n        if (hour >= 7 && hour < 10) return 0.4 + 0.4 * Math.sin((hour - 7)/3 * Math.PI);\n        if (hour >= 17 && hour < 21) return 0.6 + 0.6 * Math.sin((hour - 17)/4 * Math.PI);\n        return 0.35;\n    }\n    return 0.4;\n}\n\nconst avgPrice = msg.payload.reduce((sum, row) => sum + parseFloat(row.market_price || 0), 0) / msg.payload.length;\n\nmsg.payload.forEach(row => {\n    const label = `${row.Date} ${row.Time}`;\n    const hour = parseInt(row.Time.split(\":\")[0]);\n    const solar = parseFloat(row.solar_production) || 0;\n    const price = parseFloat(row.market_price) || 0;\n    const usage = simulateLoad(hour, season);\n\n    let action = 0, exec = 0, switchState = 0;\n\n    if ((solar > usage || price < 0.03) && battery < capacity) {\n        battery += Math.min(chargeRate, capacity - battery);\n        action = 1;\n        switchState = 1;\n    } else if (price > avgPrice * 1.2 && battery > 0) {\n        battery -= Math.min(dischargeRate, battery);\n        action = -1;\n        switchState = 0;\n    }\n\n    battery = Math.max(0, Math.min(capacity, battery));\n    exec = (solar > usage) ? 1 : (price > avgPrice * 1.2 ? -1 : 0);\n\n    labels.push(label);\n    planned.push(action);\n    executed.push(exec);\n    battery_series.push({ x: label, y: parseFloat(battery.toFixed(2)) });\n    switch_series.push({ x: label, y: switchState });\n});\n\nreturn [\n    { topic: \"Planned Action\", payload: [{ series: [\"Planned\"], data: [planned], labels }] },\n    { topic: \"Executed Action\", payload: [{ series: [\"Executed\"], data: [executed], labels }] },\n    { topic: \"Battery Level (kWh)\", payload: battery_series },\n    { topic: \"Switch State\", payload: switch_series }\n];",
        "outputs": 4,
        "x": 1220,
        "y": 40,
        "wires": [
            [
                "47d12f205e8caa01",
                "01836d431c818cb8"
            ],
            [
                "cb76ad175673c1fb"
            ],
            [
                "341e8a027694270f"
            ],
            [
                "2232fbc6f762ec91",
                "47d12f205e8caa01"
            ]
        ]
    },
    {
        "id": "878bfe8b0ca49b34",
        "type": "ui_chart",
        "z": "ae2b7e41e083df49",
        "name": "Planned Energy Source (48h)",
        "group": "group1",
        "order": 8,
        "width": "12",
        "height": "5",
        "label": "Planned Energy Source (Next 48h)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "step-after",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 48,
        "removeOlderUnit": "hour",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#003f5c",
            "#ffa600",
            "#2f4b7c",
            "#00bfae"
        ],
        "outputs": 1,
        "x": 1960,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "30cb8776d0728527",
        "type": "ui_chart",
        "z": "ae2b7e41e083df49",
        "name": "Executed Energy Source (48h)",
        "group": "group1",
        "order": 9,
        "width": "12",
        "height": "5",
        "label": "Executed Energy Source (From Tibber)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "step-after",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 48,
        "removeOlderUnit": "hour",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#a05195",
            "#ff7c43",
            "#d45087",
            "#665191"
        ],
        "outputs": 1,
        "x": 1960,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "baa57600059b5b07",
        "type": "inject",
        "z": "ae2b7e41e083df49",
        "name": "Trigger (Every 48h at 13:05)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "05 13 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 140,
        "wires": [
            [
                "526d8b079d3a29a5",
                "c2600a8b66f4967c"
            ]
        ]
    },
    {
        "id": "526d8b079d3a29a5",
        "type": "sqlite",
        "z": "ae2b7e41e083df49",
        "mydb": "962221d873768ba1",
        "sqlquery": "fixed",
        "sql": "\nSELECT \n  Date,\n  Time,\n  \"market_prices[EUR/kWh]\",\n  \"solar_Production_Estimate[kW]\",\n  \"Consumption[kWh]\",\n  \"Negative_prices[EUR/kWh]\",\n  \"Grid_prices[EUR/kWh]\"\nFROM data\nWHERE Date = date('now') OR Date = date('now', '+1 day')\n",
        "name": "Fetch Energy Data (Today + Tomorrow)",
        "x": 200,
        "y": 280,
        "wires": [
            [
                "6e4d91eed059fd8a",
                "e1b3ff7c34ae3683"
            ]
        ]
    },
    {
        "id": "6e4d91eed059fd8a",
        "type": "debug",
        "z": "ae2b7e41e083df49",
        "name": "Fetched 48h Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 160,
        "wires": []
    },
    {
        "id": "8301d9c5eeede92a",
        "type": "function",
        "z": "ae2b7e41e083df49",
        "name": "Check Solar > Consumption",
        "func": "\nlet now = new Date();\nlet match = msg.payload.find(row => {\n    let t = new Date(row.Date + 'T' + row.Time + ':00');\n    return t <= now && now < new Date(t.getTime() + 15 * 60000);\n});\nif (match && match.solar_production > match.solar_consumption) {\n    msg.payload = \"Surplus: Charging grid.\";\n} else {\n    msg.payload = \"\";\n}\nreturn msg;\n",
        "outputs": 1,
        "x": 1180,
        "y": 200,
        "wires": [
            [
                "6333cc92105cae02"
            ]
        ]
    },
    {
        "id": "6333cc92105cae02",
        "type": "ui_text",
        "z": "ae2b7e41e083df49",
        "group": "group1",
        "order": 6,
        "name": "Surplus Solar",
        "label": "Solar Status",
        "format": "{{msg.payload}}",
        "x": 1520,
        "y": 200,
        "wires": []
    },
    {
        "id": "bbee4ed2e81f34d5",
        "type": "function",
        "z": "ae2b7e41e083df49",
        "name": "Decide Source + Control Shelly",
        "func": "\nlet now = new Date();\nlet current = msg.payload.find(r => {\n    let t = new Date(r.Date + 'T' + r.Time + ':00');\n    return t <= now && now < new Date(t.getTime() + 15 * 60000);\n});\n\nif (!current) return null;\nlet price = current.price_no_tax;\nlet avg = msg.averagePrice;\nlet shellyMsg = {};\n\nif (price < 0 || price < avg * 0.8) {\n    shellyMsg.payload = { turn: \"on\" }; // charging\n} else if (price > avg * 1.2) {\n    shellyMsg.payload = { turn: \"off\" }; // discharging\n} else {\n    shellyMsg.payload = { turn: \"on\" };\n}\n\nshellyMsg.url = \"http://192.168.2.102/relay/0\";\nreturn shellyMsg;\n",
        "outputs": 1,
        "x": 1150,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "7ca087f07e56a76c",
        "type": "ui_chart",
        "z": "ae2b7e41e083df49",
        "name": "Planned Energy Source (48h)",
        "group": "group1",
        "order": 8,
        "width": "12",
        "height": "5",
        "label": "Planned Energy Source (Next 48h)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "step-after",
        "nodata": "",
        "dot": false,
        "ymin": "-1",
        "ymax": "1",
        "removeOlder": 48,
        "removeOlderPoints": "",
        "removeOlderUnit": "hour",
        "cutout": "",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#003f5c",
            "#ffa600",
            "#2f4b7c",
            "#00bfae",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1350,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "622a9e1d94cb748f",
        "type": "ui_chart",
        "z": "ae2b7e41e083df49",
        "name": "Executed Energy Source (48h)",
        "group": "group1",
        "order": 9,
        "width": "12",
        "height": "5",
        "label": "Executed Energy Source (From Tibber)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "step-after",
        "nodata": "payload",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 48,
        "removeOlderPoints": "",
        "removeOlderUnit": "hour",
        "cutout": "",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#a05195",
            "#ff7c43",
            "#d45087",
            "#665191",
            "#000000",
            "#000000",
            "#000000",
            "#000000",
            "#000000"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1330,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "56c37416e996d4ab",
        "type": "ui_chart",
        "z": "ae2b7e41e083df49",
        "name": "Battery Level (48h)",
        "group": "group1",
        "order": 8,
        "width": "12",
        "height": "5",
        "label": "Battery Level (kWh)",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "step-after",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 48,
        "removeOlderUnit": "hour",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#003f5c",
            "#ffa600",
            "#2f4b7c",
            "#00bfae"
        ],
        "outputs": 1,
        "x": 1250,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "1718c2a208b6b867",
        "type": "ui_chart",
        "z": "ae2b7e41e083df49",
        "name": "Shelly Switch State (48h)",
        "group": "group1",
        "order": 8,
        "width": "12",
        "height": "5",
        "label": "Switch State",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "step-after",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 48,
        "removeOlderUnit": "hour",
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#003f5c",
            "#ffa600",
            "#2f4b7c",
            "#00bfae"
        ],
        "outputs": 1,
        "x": 1090,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "4c52ba8f4ef34541",
        "type": "debug",
        "z": "ae2b7e41e083df49",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 280,
        "wires": []
    },
    {
        "id": "ea30433eb90e835e",
        "type": "debug",
        "z": "ae2b7e41e083df49",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 380,
        "wires": []
    },
    {
        "id": "45a807f1286fc283",
        "type": "debug",
        "z": "ae2b7e41e083df49",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 60,
        "wires": []
    },
    {
        "id": "c2600a8b66f4967c",
        "type": "exec",
        "z": "ae2b7e41e083df49",
        "command": "python3 -u /home/pi/.node-red/projects/Project/scripts/battery.py",
        "addpay": "topic",
        "append": "3",
        "useSpawn": "true",
        "name": "battery_status",
        "x": 440,
        "y": 160,
        "wires": [
            [
                "f363c1e5eb338139"
            ],
            [],
            []
        ]
    },
    {
        "id": "f363c1e5eb338139",
        "type": "function",
        "z": "ae2b7e41e083df49",
        "name": "Extract SoC",
        "func": "let socString = msg.payload;\nsocString = socString.trim();\nlet socMatch = socString.match(/([0-9.]+)%/);\nif (!socMatch || !socMatch[1]) {\n    node.error(\"Could not parse battery SoC from string\", msg);\n    return null;\n}\nlet soc = parseFloat(socMatch[1]);\n// Pack everything under a forecast-style wrapper\nmsg.payload = {\n    battery_soc: {\n        battery_soc: soc,\n        battery_capacity: 5,\n        charge_rate: 5,\n        discharge_rate: 1.666\n    }\n};\nmsg.topic = \"battery_soc\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 60,
        "wires": [
            [
                "33941865b6200dd4",
                "efad35795640eb68"
            ]
        ]
    },
    {
        "id": "c16fbb99b757cf5d",
        "type": "function",
        "z": "ae2b7e41e083df49",
        "name": "Generate Energy Plan (Today + Tomorrow)",
        "func": "node.warn(\"msg.payload at entry:\");\nnode.warn(JSON.stringify(msg._msgid, null, 2));\nlet forecast = msg.payload.forecast;\nlet soc = msg.payload.battery_soc;\nlet capacity = msg.payload.battery_capacity;\nlet chargeRate = msg.payload.charge_rate;\nlet dischargeRate = msg.payload.discharge_rate;\n\nif (!Array.isArray(forecast)) {\n    node.error(\"Forecast data is missing or invalid\", msg);\n    return null;\n}\nif (typeof soc === 'undefined' || typeof capacity === 'undefined') {\n    node.error(\"Battery state of charge or capacity is undefined.\", msg);\n    return null;\n}\n\nlet labels = [], planned = [], executed = [], battery_series = [], switch_series = [];\nlet battery = (soc / 100) * capacity;\n\nlet now = new Date(), month = now.getMonth() + 1;\nlet season = (month <= 2 || month === 12) ? \"winter\" : (month <= 5) ? \"spring\" : (month <= 8) ? \"summer\" : \"autumn\";\n\nfunction simulateLoad(hour, season) {\n    if (season === 'winter') {\n        if (hour >= 6 && hour < 9) return 0.25 + 0.35 * Math.sin((hour - 6)/3 * Math.PI);\n        if (hour >= 16 && hour < 20) return 0.6 + 0.5 * Math.sin((hour - 16)/4 * Math.PI);\n        return 0.4;\n    }\n    if (season === 'summer') {\n        if (hour >= 12 && hour < 16) return 0.8 + 1.2 * Math.sin((hour - 12)/4 * Math.PI);\n        return 0.4;\n    }\n    if (season === 'spring' || season === 'autumn') {\n        if (hour >= 7 && hour < 10) return 0.4 + 0.4 * Math.sin((hour - 7)/3 * Math.PI);\n        if (hour >= 17 && hour < 21) return 0.6 + 0.6 * Math.sin((hour - 17)/4 * Math.PI);\n        return 0.35;\n    }\n    return 0.4;\n}\n\nconst avgPrice = forecast.reduce((sum, row) => sum + parseFloat(row.market_price || 0), 0) / forecast.length;\n\nforecast.forEach(row => {\n    const label = `${row.Date} ${row.Time}`;\n    const hour = parseInt(row.Time.split(\":\")[0]);\n    const solar = parseFloat(row.solar_production) || 0;\n    const price = parseFloat(row.market_price) || 0;\n    const negative = row.Negative_prices != null ? parseFloat(row.Negative_prices) : null;\n    const usage = simulateLoad(hour, season);\n\n    let action = 0, exec = 0, switchState = 0;\n\n    if (negative !== null && battery > 0) {\n        battery -= Math.min(dischargeRate, battery);\n        action = -1;\n        switchState = 0;\n    } else if ((solar > usage || price < avgPrice * 0.8) && battery < capacity) {\n        battery += Math.min(chargeRate, capacity - battery);\n        action = 1;\n        switchState = 1;\n    } else if (price > avgPrice * 1.2 && battery > 0) {\n        battery -= Math.min(dischargeRate, battery);\n        action = -1;\n        switchState = 0;\n    } else {\n        if (battery === 0 || price < avgPrice * 0.8) {\n            switchState = 1;\n        } else {\n            switchState = 0;\n        }\n        action = 0;\n    }\n\n    battery = Math.max(0, Math.min(capacity, battery));\n    exec = (solar > usage) ? 1 : (battery === 0 || price < avgPrice * 0.8 ? 0 : (price > avgPrice * 1.2 ? -1 : 0));\n\n    labels.push(label);\n    planned.push(action);\n    executed.push(exec);\n    battery_series.push({ x: label, y: parseFloat(battery.toFixed(2)) });\n    switch_series.push({ x: label, y: switchState });\n});\n\nreturn [\n    { topic: \"Planned Action\", payload: [{ series: [\"Planned\"], data: [planned], labels }] },\n    { topic: \"Executed Action\", payload: [{ series: [\"Executed\"], data: [executed], labels }] },\n    { topic: \"Battery Level (kWh)\", payload: battery_series },\n    { topic: \"Switch State\", payload: switch_series }\n];\n",
        "outputs": 4,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 100,
        "wires": [
            [
                "7ca087f07e56a76c",
                "45a807f1286fc283"
            ],
            [
                "622a9e1d94cb748f"
            ],
            [
                "56c37416e996d4ab"
            ],
            [
                "1718c2a208b6b867"
            ]
        ]
    },
    {
        "id": "c1831e548b888e2a",
        "type": "change",
        "z": "ae2b7e41e083df49",
        "name": "Set Topic: forecast",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "forecast",
                "tot": "str"
            }
        ],
        "x": 490,
        "y": 340,
        "wires": [
            [
                "tag_forecast_parts"
            ]
        ]
    },
    {
        "id": "33941865b6200dd4",
        "type": "debug",
        "z": "ae2b7e41e083df49",
        "name": "debug 17",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 80,
        "wires": []
    },
    {
        "id": "e1b3ff7c34ae3683",
        "type": "function",
        "z": "ae2b7e41e083df49",
        "name": "Rename Forecast Keys",
        "func": "// Remap forecast keys from database to expected names\n\nif (!Array.isArray(msg.payload)) {\n    node.error(\"Expected an array of forecast entries\", msg);\n    return null;\n}\n\nmsg.payload = msg.payload.map(row => {\n    return {\n        Date: row.Date,\n        Time: row.Time,\n        market_price: row[\"market_prices[EUR/kWh]\"],\n        solar_production: row[\"Solar_Production_Estimate[kW]\"],\n        consumption: row[\"Consumption[kWh]\"],\n        Negative_prices: row[\"Negative_prices[EUR/kWh]\"],\n        grid_price: row[\"Grid_prices[EUR/kWh]\"]\n    };\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 260,
        "wires": [
            [
                "c1831e548b888e2a"
            ]
        ]
    },
    {
        "id": "efad35795640eb68",
        "type": "change",
        "z": "ae2b7e41e083df49",
        "name": "Set Topic: battery",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "battery_soc",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "battery_capacity",
                "pt": "msg",
                "to": "5",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "charge_rate",
                "pt": "msg",
                "to": "5",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "discharge_rate",
                "pt": "msg",
                "to": "1.666",
                "tot": "num"
            }
        ],
        "x": 810,
        "y": 40,
        "wires": [
            [
                "tag_battery_parts"
            ]
        ]
    },
    {
        "id": "tag_forecast_parts",
        "type": "change",
        "z": "ae2b7e41e083df49",
        "name": "Tag forecast",
        "rules": [
            {
                "t": "set",
                "p": "parts.id",
                "pt": "msg",
                "to": "energyPlanSync",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "parts.count",
                "pt": "msg",
                "to": "2",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "parts.index",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "x": 450,
        "y": 420,
        "wires": [
            [
                "13f8e0a6c8ee0676"
            ]
        ]
    },
    {
        "id": "tag_battery_parts",
        "type": "change",
        "z": "ae2b7e41e083df49",
        "name": "Tag battery",
        "rules": [
            {
                "t": "set",
                "p": "parts.id",
                "pt": "msg",
                "to": "energyPlanSync",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "parts.count",
                "pt": "msg",
                "to": "2",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "parts.index",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "x": 1010,
        "y": 40,
        "wires": [
            [
                "13f8e0a6c8ee0676"
            ]
        ]
    },
    {
        "id": "13f8e0a6c8ee0676",
        "type": "join",
        "z": "ae2b7e41e083df49",
        "name": "Join Battery + Forecast (parts sync)",
        "mode": "auto",
        "build": "object",
        "property": "topic",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "2",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 740,
        "y": 420,
        "wires": [
            [
                "ea30433eb90e835e",
                "delay_before_generate_plan"
            ]
        ]
    },
    {
        "id": "generate_energy_plan_safe_null_check",
        "type": "function",
        "z": "ae2b7e41e083df49",
        "name": "Generate Energy Plan (Safe + Null Check)",
        "func": "\nnode.warn(\"msg.payload at entry:\");\nnode.warn(JSON.stringify(msg.payload, null, 2));\n\nif (!msg.payload || !msg.payload.forecast || !msg.payload.battery_soc) {\n    node.error(\"Missing forecast or battery_soc in payload\", msg);\n    return null;\n}\n\nlet forecast = msg.payload.forecast;\nlet soc = msg.payload.battery_soc.battery_soc;\nlet capacity = msg.payload.battery_soc.battery_capacity;\nlet chargeRate = msg.payload.battery_soc.charge_rate;\nlet dischargeRate = msg.payload.battery_soc.discharge_rate;\n\nif (!Array.isArray(forecast)) {\n    node.error(\"Forecast data is missing or invalid\", msg);\n    return null;\n}\n\nif (typeof soc === 'undefined' || typeof capacity === 'undefined') {\n    node.error(\"Battery state of charge or capacity is undefined.\", msg);\n    return null;\n}\n\nlet labels = [], planned = [], executed = [], battery_series = [], switch_series = [];\nlet battery = (soc / 100) * capacity;\n\nlet now = new Date(), month = now.getMonth() + 1;\nlet season = (month <= 2 || month === 12) ? \"winter\" : (month <= 5) ? \"spring\" : (month <= 8) ? \"summer\" : \"autumn\";\n\nfunction simulateLoad(hour, season) {\n    if (season === 'winter') {\n        if (hour >= 6 && hour < 9) return 0.25 + 0.35 * Math.sin((hour - 6)/3 * Math.PI);\n        if (hour >= 16 && hour < 20) return 0.6 + 0.5 * Math.sin((hour - 16)/4 * Math.PI);\n        return 0.4;\n    }\n    if (season === 'summer') {\n        if (hour >= 12 && hour < 16) return 0.8 + 1.2 * Math.sin((hour - 12)/4 * Math.PI);\n        return 0.4;\n    }\n    if (season === 'spring' || season === 'autumn') {\n        if (hour >= 7 && hour < 10) return 0.4 + 0.4 * Math.sin((hour - 7)/3 * Math.PI);\n        if (hour >= 17 && hour < 21) return 0.6 + 0.6 * Math.sin((hour - 17)/4 * Math.PI);\n        return 0.35;\n    }\n    return 0.4;\n}\n\nconst avgPrice = forecast.reduce((sum, row) => sum + parseFloat(row.market_price || 0), 0) / forecast.length;\n\nfor (let i = 0; i < forecast.length; i++) {\n    const row = forecast[i];\n    const label = `${row.Date} ${row.Time}`;\n    const hour = parseInt(row.Time.split(\":\")[0]);\n\n    if (row.market_price === null || row.market_price === undefined) {\n        node.warn(\"Null market price detected. Stopping forecast processing.\");\n        break;\n    }\n\n    const price = parseFloat(row.market_price);\n    const solar = parseFloat(row.solar_production) || 0;\n    const negative = row.Negative_prices != null ? parseFloat(row.Negative_prices) : null;\n    const usage = simulateLoad(hour, season);\n\n    let action = 0, exec = 0, switchState = 0;\n\n    if (negative !== null && battery > 0) {\n        battery -= Math.min(dischargeRate, battery);\n        action = -1;\n        switchState = 0;\n    } else if ((solar > usage || price < avgPrice * 0.8) && battery < capacity) {\n        battery += Math.min(chargeRate, capacity - battery);\n        action = 1;\n        switchState = 1;\n    } else if (price > avgPrice * 1.2 && battery > 0) {\n        battery -= Math.min(dischargeRate, battery);\n        action = -1;\n        switchState = 0;\n    } else {\n        if (battery === 0 || price < avgPrice * 0.8) {\n            switchState = 1;\n        } else {\n            switchState = 0;\n        }\n        action = 0;\n    }\n\n    battery = Math.max(0, Math.min(capacity, battery));\n    exec = (solar > usage) ? 1 : (battery === 0 || price < avgPrice * 0.8 ? 0 : (price > avgPrice * 1.2 ? -1 : 0));\n\n    labels.push(label);\n    planned.push(action);\n    executed.push(exec);\n    battery_series.push({ x: label, y: parseFloat(battery.toFixed(2)) });\n    switch_series.push({ x: label, y: switchState });\n}\n\nreturn [\n    { topic: \"Planned Action\", payload: [{ series: [\"Planned\"], data: [planned], labels }] },\n    { topic: \"Executed Action\", payload: [{ series: [\"Executed\"], data: [executed], labels }] },\n    { topic: \"Battery Level (kWh)\", payload: battery_series },\n    { topic: \"Switch State\", payload: switch_series }\n];\n",
        "outputs": 4,
        "x": 870,
        "y": 300,
        "wires": [
            [
                "7ca087f07e56a76c"
            ],
            [],
            [],
            []
        ]
    },
    {
        "id": "delay_before_generate_plan",
        "type": "delay",
        "z": "ae2b7e41e083df49",
        "name": "Delay before Generate Plan",
        "pauseType": "delay",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 880,
        "y": 360,
        "wires": [
            [
                "generate_energy_plan_safe_null_check"
            ]
        ]
    },
    {
        "id": "7b3ee38955e4990f",
        "type": "inject",
        "z": "9e10acadda40ebb9",
        "name": "Trigger (Every 48h at 13:05)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "05 13 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "a98b74b6a4374e99"
            ]
        ]
    },
    {
        "id": "5ad890aa78f594e0",
        "type": "sqlite",
        "z": "9e10acadda40ebb9",
        "mydb": "962221d873768ba1",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "Fetch Energy Data (Today + Tomorrow)",
        "x": 620,
        "y": 120,
        "wires": [
            [
                "b063d78cd70259b6",
                "136487a88d723d96",
                "9c3ee1da351f14f4",
                "13b6b06bbc2d5eec"
            ]
        ]
    },
    {
        "id": "b063d78cd70259b6",
        "type": "debug",
        "z": "9e10acadda40ebb9",
        "name": "Fetched 48h Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 120,
        "wires": []
    },
    {
        "id": "136487a88d723d96",
        "type": "function",
        "z": "9e10acadda40ebb9",
        "name": "Check Solar > Consumption",
        "func": "\nlet now = new Date();\nlet match = msg.payload.find(row => {\n    let t = new Date(row.Date + 'T' + row.Time + ':00');\n    return t <= now && now < new Date(t.getTime() + 15 * 60000);\n});\nif (match && match.solar_production > match.solar_consumption) {\n    msg.payload = \"Surplus: Charging grid.\";\n} else {\n    msg.payload = \"\";\n}\nreturn msg;\n",
        "outputs": 1,
        "x": 1260,
        "y": 160,
        "wires": [
            [
                "4c3303de4f509c3a"
            ]
        ]
    },
    {
        "id": "4c3303de4f509c3a",
        "type": "ui_text",
        "z": "9e10acadda40ebb9",
        "group": "group1",
        "order": 11,
        "name": "Surplus Solar",
        "label": "Solar Status",
        "format": "{{msg.payload}}",
        "x": 1500,
        "y": 160,
        "wires": []
    },
    {
        "id": "9c3ee1da351f14f4",
        "type": "function",
        "z": "9e10acadda40ebb9",
        "name": "Decide Source + Control Shelly",
        "func": "\nlet now = new Date();\nlet current = msg.payload.find(r => {\n    let t = new Date(r.Date + 'T' + r.Time + ':00');\n    return t <= now && now < new Date(t.getTime() + 15 * 60000);\n});\n\nif (!current) return null;\nlet price = current.price_no_tax;\nlet avg = msg.averagePrice;\nlet shellyMsg = {};\n\nif (price < 0 || price < avg * 0.8) {\n    shellyMsg.payload = { turn: \"on\" }; // charging\n} else if (price > avg * 1.2) {\n    shellyMsg.payload = { turn: \"off\" }; // discharging\n} else {\n    shellyMsg.payload = { turn: \"on\" };\n}\n\nshellyMsg.url = \"http://192.168.2.102/relay/0\";\nreturn shellyMsg;\n",
        "outputs": 1,
        "x": 1310,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "4bd1e6e036b07f67",
        "type": "debug",
        "z": "9e10acadda40ebb9",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 480,
        "wires": []
    },
    {
        "id": "13b6b06bbc2d5eec",
        "type": "function",
        "z": "9e10acadda40ebb9",
        "name": "Generate Corrected Energy Plans (48h)",
        "func": "let planned = [];\nlet executed = [];\nlet batterySeries = [];\nlet switchSeries = [];\n\nlet battery = 2.5;\nconst capacity = 5.0;\nconst chargeRate = 5.0;\nconst dischargeRate = 5.0 / 3;\n\nlet now = new Date();\nlet month = now.getMonth() + 1;\nlet season = (month <= 2 || month === 12) ? \"winter\"\n    : (month <= 5) ? \"spring\"\n        : (month <= 8) ? \"summer\"\n            : \"autumn\";\n\n// Simulated load curve\nfunction simulateLoad(hour, season) {\n    if (season === 'winter') {\n        if (hour >= 6 && hour < 9) return 0.25 + 0.35 * Math.sin((hour - 6) / 3 * Math.PI);\n        if (hour >= 16 && hour < 20) return 0.6 + 0.5 * Math.sin((hour - 16) / 4 * Math.PI);\n        return 0.4;\n    }\n    if (season === 'summer') {\n        if (hour >= 12 && hour < 16) return 0.8 + 1.2 * Math.sin((hour - 12) / 4 * Math.PI);\n        return 0.4;\n    }\n    if (season === 'spring' || season === 'autumn') {\n        if (hour >= 7 && hour < 10) return 0.4 + 0.4 * Math.sin((hour - 7) / 3 * Math.PI);\n        if (hour >= 17 && hour < 21) return 0.6 + 0.6 * Math.sin((hour - 17) / 4 * Math.PI);\n        return 0.35;\n    }\n    return 0.4;\n}\n\nlet data = msg.payload;\nlet avgPrice = data.reduce((sum, row) => sum + (parseFloat(row[\"market_prices[EUR/kWh]\"]) || 0), 0) / data.length;\n\ndata.forEach(row => {\n    const timestamp = new Date(`${row.Date}T${row.Time}:00`).toISOString();\n\n    let price = parseFloat(row[\"market_prices[EUR/kWh]\"]) || 0;\n    let solar = parseFloat(row[\"Solar_Production_Estimate[kW]\"]) || 0;\n    let negative = row[\"Negative_prices[EUR/kWh]\"]; // May be null\n    let hour = parseInt(row.Time.split(\":\")[0]);\n    let usage = simulateLoad(hour, season);\n\n    let action = 0, exec = 0, switchState = 0;\n\n    if (negative !== null && battery > 0) {\n        battery -= Math.min(dischargeRate, battery);\n        action = -1;\n        switchState = 0;\n    } else if ((solar > usage || price < avgPrice * 0.8) && battery < capacity) {\n        battery += Math.min(chargeRate, capacity - battery);\n        action = 1;\n        switchState = 1;\n    } else if (price > avgPrice * 1.2 && battery > 0) {\n        battery -= Math.min(dischargeRate, battery);\n        action = -1;\n        switchState = 0;\n    } else {\n        if (battery === 0 || price < avgPrice * 0.8) {\n            switchState = 1;\n        } else {\n            switchState = 0;\n        }\n        action = 0;\n    }\n\n    battery = Math.max(0, Math.min(battery, capacity));\n    exec = (solar > usage) ? 1 : (price > avgPrice * 1.2 ? -1 : 0);\n\n    planned.push({ x: timestamp, y: action });\n    executed.push({ x: timestamp, y: exec });\n    batterySeries.push({ x: timestamp, y: Number(battery.toFixed(2)) });\n    switchSeries.push({ x: timestamp, y: switchState });\n});\n\n// Output messages\nreturn [\n    { topic: \"Planned Energy Source (Next 48h)\", payload: planned },\n    { topic: \"Executed Energy Source (From Tibber)\", payload: executed },\n    { topic: \"Battery Level (kWh)\", payload: batterySeries },\n    { topic: \"Shelly Switch State (48h)\", payload: switchSeries }\n];\n",
        "outputs": 4,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 300,
        "wires": [
            [
                "e75d057e0c13cf7c",
                "97604d230d4f85f4",
                "4029c1bccc3a9ae0"
            ],
            [
                "8bd97ae701ded877",
                "4bd1e6e036b07f67",
                "4029c1bccc3a9ae0"
            ],
            [
                "db0628f9c4b2b383",
                "4029c1bccc3a9ae0"
            ],
            [
                "0d836b4121520688",
                "4029c1bccc3a9ae0"
            ]
        ]
    },
    {
        "id": "a98b74b6a4374e99",
        "type": "function",
        "z": "9e10acadda40ebb9",
        "name": "Build SQL Query",
        "func": "// Get current date\nconst now = new Date();\nnow.setHours(13, 5, 0, 0);  // Set time to 13:05:00\n\n// Format to 'YYYY-MM-DDTHH:MM:SS'\nconst startTime = now.toISOString().slice(0, 19);\n\n// SQL query to fetch records from today 13:05 onwards\nmsg.topic = `\n    SELECT * FROM data\n    WHERE datetime(Date || 'T' || substr('0' || Time, -5)) >= '${startTime}'\n    ORDER BY Date, Time\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 140,
        "wires": [
            [
                "5ad890aa78f594e0",
                "e143b38060dcc51e"
            ]
        ]
    },
    {
        "id": "e75d057e0c13cf7c",
        "type": "debug",
        "z": "9e10acadda40ebb9",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 300,
        "wires": []
    },
    {
        "id": "ea664cb1c59312bc",
        "type": "function",
        "z": "9e10acadda40ebb9",
        "name": "Build SQL Query ( Start from the previous day at 13:05 )",
        "func": "// Get current date and move back one day\nconst start = new Date();\nstart.setDate(start.getDate() - 1);\nstart.setHours(13, 0, 0, 0);  // Set time to 13:00:00\n\n// Format to 'YYYY-MM-DDTHH:MM:SS'\nconst startTime = start.toISOString().slice(0, 19);\n\n// SQL query to fetch records from yesterday at 13:00 onward\nmsg.topic = `\n    SELECT * FROM data\n    WHERE datetime(Date || 'T' || substr('0' || Time, -5)) >= '${startTime}'\n    ORDER BY Date, Time\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 260,
        "wires": [
            [
                "e143b38060dcc51e"
            ]
        ]
    },
    {
        "id": "48a8e4dc4b959348",
        "type": "inject",
        "z": "9e10acadda40ebb9",
        "name": "Trigger (Every 48h at 13:05)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "05 13 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 360,
        "wires": [
            [
                "ea664cb1c59312bc"
            ]
        ]
    },
    {
        "id": "db0628f9c4b2b383",
        "type": "ui-chart",
        "z": "9e10acadda40ebb9",
        "group": "7c98a50e31ce9ec5",
        "name": "Battery Level (kWh)",
        "label": "Battery Level (kWh)",
        "order": 2,
        "chartType": "line",
        "category": "Characters",
        "categoryType": "str",
        "xAxisLabel": "Time",
        "xAxisProperty": "x",
        "xAxisPropertyType": "property",
        "xAxisType": "time",
        "xAxisFormat": "dd/LL HH:mm",
        "xAxisFormatType": "custom",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "(kWh)",
        "yAxisProperty": "y",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": "",
        "action": "replace",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 1530,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "8bd97ae701ded877",
        "type": "ui-chart",
        "z": "9e10acadda40ebb9",
        "group": "b2c938b22023af62",
        "name": "Executed Energy Source (From Tibber)",
        "label": "Executed Energy Source (From Tibber)",
        "order": 3,
        "chartType": "line",
        "category": "Characters",
        "categoryType": "str",
        "xAxisLabel": "Time",
        "xAxisProperty": "x",
        "xAxisPropertyType": "property",
        "xAxisType": "time",
        "xAxisFormat": "dd/LL HH:mm",
        "xAxisFormatType": "custom",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "y",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": "",
        "action": "replace",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 1620,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "97604d230d4f85f4",
        "type": "ui-chart",
        "z": "9e10acadda40ebb9",
        "group": "b2c938b22023af62",
        "name": "Planned Energy Source (Next 48h)",
        "label": "Planned Energy Source (Next 48h)",
        "order": 2,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "x",
        "xAxisPropertyType": "property",
        "xAxisType": "time",
        "xAxisFormat": "dd/LL HH:mm",
        "xAxisFormatType": "custom",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "y",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": "",
        "action": "replace",
        "stackSeries": true,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": "0",
        "removeOlderUnit": "86400",
        "removeOlderPoints": "",
        "colors": [
            "#438bea",
            "#95db87",
            "#e3ff0f",
            "#bdbcbc",
            "#757674",
            "#0859c4",
            "#fe7e0e",
            "#9467bd",
            "#a07979"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 1640,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "0d836b4121520688",
        "type": "ui-chart",
        "z": "9e10acadda40ebb9",
        "group": "b2c938b22023af62",
        "name": "Shelly Switch State (48h)",
        "label": "Shelly Switch State (48h)",
        "order": 4,
        "chartType": "line",
        "category": "Characters",
        "categoryType": "str",
        "xAxisLabel": "Time",
        "xAxisProperty": "x",
        "xAxisPropertyType": "property",
        "xAxisType": "time",
        "xAxisFormat": "dd/LL HH:mm",
        "xAxisFormatType": "custom",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "y",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": "",
        "action": "replace",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 1510,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "4029c1bccc3a9ae0",
        "type": "ui-chart",
        "z": "9e10acadda40ebb9",
        "group": "b2c938b22023af62",
        "name": "Total Scenario",
        "label": "Total Scenario",
        "order": 1,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "x",
        "xAxisPropertyType": "property",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "c",
        "yAxisProperty": "y",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": "",
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "86400",
        "removeOlderPoints": "",
        "colors": [
            "#498d1c",
            "#f95353",
            "#4c60c2",
            "#f29c07",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 1520,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "e143b38060dcc51e",
        "type": "function",
        "z": "9e10acadda40ebb9",
        "name": "Clear Chart",
        "func": "let planned = [];\nlet executed = [];\nlet batterySeries = [];\nlet switchSeries = [];\n\n\n\n    return [\n        { topic: \"planned\", payload: [] },\n        { topic: \"executed\", payload: [] },\n        { topic: \"batterySeries\", payload: [] },\n        { topic: \"switchSeries\", payload: [] }\n    ];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 500,
        "wires": [
            [
                "4029c1bccc3a9ae0"
            ]
        ]
    },
    {
        "id": "fd73d7288d84fc85",
        "type": "inject",
        "z": "9e10acadda40ebb9",
        "name": "Clear Chart",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 1310,
        "y": 620,
        "wires": [
            [
                "4029c1bccc3a9ae0"
            ]
        ]
    },
    {
        "id": "rename_forecast_keys",
        "type": "function",
        "z": "flow_forecast_remap",
        "name": "Rename Forecast Keys",
        "func": "// Remap forecast keys from database to expected names\n\nif (!Array.isArray(msg.payload)) {\n    node.error(\"Expected an array of forecast entries\", msg);\n    return null;\n}\n\nmsg.payload = msg.payload.map(row => {\n    return {\n        Date: row.Date,\n        Time: row.Time,\n        market_price: row[\"market_prices[EUR/kWh]\"],\n        solar_production: row[\"Solar_Production_Estimate[kW]\"],\n        consumption: row[\"Consumption[kWh]\"],\n        Negative_prices: row[\"Negative_prices[EUR/kWh]\"],\n        grid_price: row[\"Grid_prices[EUR/kWh]\"]\n    };\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 160,
        "wires": [
            []
        ]
    }
]